
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_2>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_Init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
void GPIO_Init()
{
	DDRD |= ((1<<5)|(1<<6)|(1<<7));
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	PORTD &=~((1<<5)|(1<<6)|(1<<7));
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8f 71       	andi	r24, 0x1F	; 31
  76:	82 bb       	out	0x12, r24	; 18
  78:	08 95       	ret

0000007a <Interrupt_INIT>:
	
}
void Interrupt_INIT()
{
	sei();
  7a:	78 94       	sei
	MCUCR |=0x0D;
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	8d 60       	ori	r24, 0x0D	; 13
  80:	85 bf       	out	0x35, r24	; 53
	MCUSR &= (1<<6);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 74       	andi	r24, 0x40	; 64
  86:	84 bf       	out	0x34, r24	; 52
	GICR |=0xE0;
  88:	8b b7       	in	r24, 0x3b	; 59
  8a:	80 6e       	ori	r24, 0xE0	; 224
  8c:	8b bf       	out	0x3b, r24	; 59
  8e:	08 95       	ret

00000090 <main>:
}
int main(void)
{
	GPIO_Init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_Init>
	Interrupt_INIT();
  94:	0e 94 3d 00 	call	0x7a	; 0x7a <Interrupt_INIT>
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x8>

0000009a <__vector_1>:
	
	
	return 0;
}

ISR(INT0_vect){
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25

	PORTD |= 1<<5;
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f e3       	ldi	r18, 0x3F	; 63
  b2:	8d e0       	ldi	r24, 0x0D	; 13
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <__vector_1+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_1+0x26>
  c0:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<5);
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	8f 7d       	andi	r24, 0xDF	; 223
  c6:	82 bb       	out	0x12, r24	; 18
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_2>:
ISR(INT1_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	PORTD |= 1<<6;
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	2f e3       	ldi	r18, 0x3F	; 63
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	93 e0       	ldi	r25, 0x03	; 3
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <__vector_2+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <__vector_2+0x26>
  fe:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<6);
 100:	82 b3       	in	r24, 0x12	; 18
 102:	8f 7b       	andi	r24, 0xBF	; 191
 104:	82 bb       	out	0x12, r24	; 18

}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_3>:
ISR(INT2_vect){
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	PORTD |= 1<<7 ;
 126:	82 b3       	in	r24, 0x12	; 18
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	82 bb       	out	0x12, r24	; 18
 12c:	2f e3       	ldi	r18, 0x3F	; 63
 12e:	8d e0       	ldi	r24, 0x0D	; 13
 130:	93 e0       	ldi	r25, 0x03	; 3
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <__vector_3+0x1c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <__vector_3+0x26>
 13c:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<7);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	8f 77       	andi	r24, 0x7F	; 127
 142:	82 bb       	out	0x12, r24	; 18
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
