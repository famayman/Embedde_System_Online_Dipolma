
Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  000007d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ed  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  000012e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Memory_Map.h"
#include "Utils.h"
#include "avr/delay.h"
int main(void)
{
    DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	unsigned char i,j;
	while(1)
	{
   for(i=0;i<10;i++)
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	1e c0       	rjmp	.+60     	; 0xb0 <main+0x44>
   {
	   for(j=0;j<10;j++)
	   {
		   PORTC = (0b1011)| (i<<4);
  74:	40 e1       	ldi	r20, 0x10	; 16
  76:	94 9f       	mul	r25, r20
  78:	90 01       	movw	r18, r0
  7a:	11 24       	eor	r1, r1
  7c:	2b 60       	ori	r18, 0x0B	; 11
  7e:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	ef e5       	ldi	r30, 0x5F	; 95
  82:	fa ee       	ldi	r31, 0xEA	; 234
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
		   _delay_ms(30);
		   PORTC = (0b0111)| (j<<4);
  8c:	f0 e1       	ldi	r31, 0x10	; 16
  8e:	8f 9f       	mul	r24, r31
  90:	90 01       	movw	r18, r0
  92:	11 24       	eor	r1, r1
  94:	27 60       	ori	r18, 0x07	; 7
  96:	25 bb       	out	0x15, r18	; 21
  98:	ef e5       	ldi	r30, 0x5F	; 95
  9a:	fa ee       	ldi	r31, 0xEA	; 234
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x30>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
	unsigned char i,j;
	while(1)
	{
   for(i=0;i<10;i++)
   {
	   for(j=0;j<10;j++)
  a4:	8f 5f       	subi	r24, 0xFF	; 255
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x3e>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	18 f3       	brcs	.-58     	; 0x74 <main+0x8>
{
    DDRC = 0xFF;
	unsigned char i,j;
	while(1)
	{
   for(i=0;i<10;i++)
  ae:	9f 5f       	subi	r25, 0xFF	; 255
  b0:	9a 30       	cpi	r25, 0x0A	; 10
  b2:	d0 f3       	brcs	.-12     	; 0xa8 <main+0x3c>
  b4:	dd cf       	rjmp	.-70     	; 0x70 <main+0x4>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
