
Uint7_Lesson1_Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000054b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fd  00000000  00000000  000006ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b9  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000299  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001065  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Utils.h"
#include "Memory_Map.h"
int main(void)
{
	unsigned char i = 0;
	Reset(DDRD,0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
	Reset(PORTD,0);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	82 bb       	out	0x12, r24	; 18
	set(DDRD,5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	81 bb       	out	0x11, r24	; 17
	set(DDRD,6);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 64       	ori	r24, 0x40	; 64
  82:	81 bb       	out	0x11, r24	; 17
	set(DDRD,7);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 68       	ori	r24, 0x80	; 128
  88:	81 bb       	out	0x11, r24	; 17
 */ 
#include "Utils.h"
#include "Memory_Map.h"
int main(void)
{
	unsigned char i = 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
	set(DDRD,5);
	set(DDRD,6);
	set(DDRD,7);
    while (1) 
    {
		if(Read(PIND,0) == 1 )
  8c:	80 9b       	sbis	0x10, 0	; 16
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x20>
		{
			if(i == 0)
  90:	81 11       	cpse	r24, r1
  92:	05 c0       	rjmp	.+10     	; 0x9e <main+0x32>
			{
				set(PORTD,5);
  94:	92 b3       	in	r25, 0x12	; 18
  96:	90 62       	ori	r25, 0x20	; 32
  98:	92 bb       	out	0x12, r25	; 18
				i++;
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	0d c0       	rjmp	.+26     	; 0xb8 <main+0x4c>
			}
			else if(i == 1)
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	29 f4       	brne	.+10     	; 0xac <main+0x40>
			{
				set(PORTD,6);
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	90 64       	ori	r25, 0x40	; 64
  a6:	92 bb       	out	0x12, r25	; 18
				i++;
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	06 c0       	rjmp	.+12     	; 0xb8 <main+0x4c>
			}
			else if(i==2)
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x4c>
			{
				set(PORTD,7);
  b0:	92 b3       	in	r25, 0x12	; 18
  b2:	90 68       	ori	r25, 0x80	; 128
  b4:	92 bb       	out	0x12, r25	; 18
				i++;
  b6:	8f 5f       	subi	r24, 0xFF	; 255
			}
			while(Read(PIND,0) == 1);//For single press
  b8:	80 99       	sbic	0x10, 0	; 16
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <main+0x4c>
  bc:	e7 cf       	rjmp	.-50     	; 0x8c <main+0x20>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
