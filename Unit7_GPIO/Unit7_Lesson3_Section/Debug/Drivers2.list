
Drivers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000c74  08000c74  00010c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c9c  08000c9c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000c9c  08000c9c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c9c  08000c9c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ca0  08000ca0  00010ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08000cc8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000cc8  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003253  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007c4  00000000  00000000  000232a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  00023a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00024128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00024268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f90  00000000  00000000  00024360  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001aa3  00000000  00000000  000262f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007ab3  00000000  00000000  00027d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f846  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  0002f8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c5c 	.word	0x08000c5c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08000c5c 	.word	0x08000c5c

08000170 <keypad_init>:
 */ 
#include "Key_Pad_Driver.h"
int Key_padRow[] = {R0,R1,R2,R3};
int Key_padCol[] = {C0,C1,C2,C3};
void keypad_init()
{ 
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//we will try to make all as output this time
	P_Config->GPIO_Pin_Number = R0;
 8000174:	4b4b      	ldr	r3, [pc, #300]	; (80002a4 <keypad_init+0x134>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2201      	movs	r2, #1
 800017a:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 800017c:	4b49      	ldr	r3, [pc, #292]	; (80002a4 <keypad_init+0x134>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2204      	movs	r2, #4
 8000182:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <keypad_init+0x134>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2201      	movs	r2, #1
 800018a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 800018c:	4b45      	ldr	r3, [pc, #276]	; (80002a4 <keypad_init+0x134>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4619      	mov	r1, r3
 8000192:	4845      	ldr	r0, [pc, #276]	; (80002a8 <keypad_init+0x138>)
 8000194:	f000 fb57 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = R1;
 8000198:	4b42      	ldr	r3, [pc, #264]	; (80002a4 <keypad_init+0x134>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2202      	movs	r2, #2
 800019e:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 80001a0:	4b40      	ldr	r3, [pc, #256]	; (80002a4 <keypad_init+0x134>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2204      	movs	r2, #4
 80001a6:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <keypad_init+0x134>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2201      	movs	r2, #1
 80001ae:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 80001b0:	4b3c      	ldr	r3, [pc, #240]	; (80002a4 <keypad_init+0x134>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4619      	mov	r1, r3
 80001b6:	483c      	ldr	r0, [pc, #240]	; (80002a8 <keypad_init+0x138>)
 80001b8:	f000 fb45 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = R2;
 80001bc:	4b39      	ldr	r3, [pc, #228]	; (80002a4 <keypad_init+0x134>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2208      	movs	r2, #8
 80001c2:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 80001c4:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <keypad_init+0x134>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	2204      	movs	r2, #4
 80001ca:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 80001cc:	4b35      	ldr	r3, [pc, #212]	; (80002a4 <keypad_init+0x134>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2201      	movs	r2, #1
 80001d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 80001d4:	4b33      	ldr	r3, [pc, #204]	; (80002a4 <keypad_init+0x134>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4619      	mov	r1, r3
 80001da:	4833      	ldr	r0, [pc, #204]	; (80002a8 <keypad_init+0x138>)
 80001dc:	f000 fb33 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = R3;
 80001e0:	4b30      	ldr	r3, [pc, #192]	; (80002a4 <keypad_init+0x134>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2210      	movs	r2, #16
 80001e6:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 80001e8:	4b2e      	ldr	r3, [pc, #184]	; (80002a4 <keypad_init+0x134>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2204      	movs	r2, #4
 80001ee:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 80001f0:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <keypad_init+0x134>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 80001f8:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <keypad_init+0x134>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4619      	mov	r1, r3
 80001fe:	482a      	ldr	r0, [pc, #168]	; (80002a8 <keypad_init+0x138>)
 8000200:	f000 fb21 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = C0;
 8000204:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <keypad_init+0x134>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2220      	movs	r2, #32
 800020a:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 800020c:	4b25      	ldr	r3, [pc, #148]	; (80002a4 <keypad_init+0x134>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2204      	movs	r2, #4
 8000212:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000214:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <keypad_init+0x134>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2201      	movs	r2, #1
 800021a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 800021c:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <keypad_init+0x134>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	4821      	ldr	r0, [pc, #132]	; (80002a8 <keypad_init+0x138>)
 8000224:	f000 fb0f 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = C1;
 8000228:	4b1e      	ldr	r3, [pc, #120]	; (80002a4 <keypad_init+0x134>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2240      	movs	r2, #64	; 0x40
 800022e:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 8000230:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <keypad_init+0x134>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <keypad_init+0x134>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2201      	movs	r2, #1
 800023e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <keypad_init+0x134>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4619      	mov	r1, r3
 8000246:	4818      	ldr	r0, [pc, #96]	; (80002a8 <keypad_init+0x138>)
 8000248:	f000 fafd 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = C2;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <keypad_init+0x134>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2280      	movs	r2, #128	; 0x80
 8000252:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <keypad_init+0x134>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2204      	movs	r2, #4
 800025a:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <keypad_init+0x134>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2201      	movs	r2, #1
 8000262:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <keypad_init+0x134>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	480f      	ldr	r0, [pc, #60]	; (80002a8 <keypad_init+0x138>)
 800026c:	f000 faeb 	bl	8000846 <MCAL_GPIO_Init>
	P_Config->GPIO_Pin_Number = C3;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <keypad_init+0x134>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000278:	801a      	strh	r2, [r3, #0]
	P_Config->GPIO_Mode = GPIO_Mode_Output_PP;
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <keypad_init+0x134>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2204      	movs	r2, #4
 8000280:	709a      	strb	r2, [r3, #2]
	P_Config->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <keypad_init+0x134>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2201      	movs	r2, #1
 8000288:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOB, P_Config);
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <keypad_init+0x134>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <keypad_init+0x138>)
 8000292:	f000 fad8 	bl	8000846 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePort(GPIOB, 0xFF);
 8000296:	21ff      	movs	r1, #255	; 0xff
 8000298:	4803      	ldr	r0, [pc, #12]	; (80002a8 <keypad_init+0x138>)
 800029a:	f000 fb8d 	bl	80009b8 <MCAL_GPIO_WritePort>

}	
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000040 	.word	0x20000040
 80002a8:	40010c00 	.word	0x40010c00

080002ac <Keypad_getKey>:
char Keypad_getKey()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	//How it works .......
	//Firstly we will make all Rows as pull up input pins so the volt on those will be 5 volt and putting high on Col
	//Secondly putting zero on a particular Col 
	//Thirdly we will check if any Row is Low so we can determine the KeyPressed
	int i ,j ;
	for( i = 0; i<4;i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e0b4      	b.n	8000422 <Keypad_getKey+0x176>
	{
		MCAL_GPIO_WritePin(GPIOB, Key_padCol[0] , GPIO_PIN_Set);
 80002b8:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <Keypad_getKey+0x188>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	2201      	movs	r2, #1
 80002c0:	4619      	mov	r1, r3
 80002c2:	485d      	ldr	r0, [pc, #372]	; (8000438 <Keypad_getKey+0x18c>)
 80002c4:	f000 fb61 	bl	800098a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, Key_padCol[1], GPIO_PIN_Set);
 80002c8:	4b5a      	ldr	r3, [pc, #360]	; (8000434 <Keypad_getKey+0x188>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	2201      	movs	r2, #1
 80002d0:	4619      	mov	r1, r3
 80002d2:	4859      	ldr	r0, [pc, #356]	; (8000438 <Keypad_getKey+0x18c>)
 80002d4:	f000 fb59 	bl	800098a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, Key_padCol[2], GPIO_PIN_Set);
 80002d8:	4b56      	ldr	r3, [pc, #344]	; (8000434 <Keypad_getKey+0x188>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	b29b      	uxth	r3, r3
 80002de:	2201      	movs	r2, #1
 80002e0:	4619      	mov	r1, r3
 80002e2:	4855      	ldr	r0, [pc, #340]	; (8000438 <Keypad_getKey+0x18c>)
 80002e4:	f000 fb51 	bl	800098a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, Key_padCol[3],GPIO_PIN_Set);
 80002e8:	4b52      	ldr	r3, [pc, #328]	; (8000434 <Keypad_getKey+0x188>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	b29b      	uxth	r3, r3
 80002ee:	2201      	movs	r2, #1
 80002f0:	4619      	mov	r1, r3
 80002f2:	4851      	ldr	r0, [pc, #324]	; (8000438 <Keypad_getKey+0x18c>)
 80002f4:	f000 fb49 	bl	800098a <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB, Key_padCol[i],GPIO_PIN_Reset);
 80002f8:	4a4e      	ldr	r2, [pc, #312]	; (8000434 <Keypad_getKey+0x188>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000300:	b29b      	uxth	r3, r3
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	484c      	ldr	r0, [pc, #304]	; (8000438 <Keypad_getKey+0x18c>)
 8000308:	f000 fb3f 	bl	800098a <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	e080      	b.n	8000414 <Keypad_getKey+0x168>
		{
			if(MCAL_GPIO_ReadPin(GPIOB, Key_padRow[j]) == 0)
 8000312:	4a4a      	ldr	r2, [pc, #296]	; (800043c <Keypad_getKey+0x190>)
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031a:	b29b      	uxth	r3, r3
 800031c:	4619      	mov	r1, r3
 800031e:	4846      	ldr	r0, [pc, #280]	; (8000438 <Keypad_getKey+0x18c>)
 8000320:	f000 fb1c 	bl	800095c <MCAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d171      	bne.n	800040e <Keypad_getKey+0x162>
			{
				while (MCAL_GPIO_ReadPin(GPIOB, Key_padRow[j]) == 0); //waiting until releasing his hand
 800032a:	bf00      	nop
 800032c:	4a43      	ldr	r2, [pc, #268]	; (800043c <Keypad_getKey+0x190>)
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	483f      	ldr	r0, [pc, #252]	; (8000438 <Keypad_getKey+0x18c>)
 800033a:	f000 fb0f 	bl	800095c <MCAL_GPIO_ReadPin>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f3      	beq.n	800032c <Keypad_getKey+0x80>
				switch (i)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b03      	cmp	r3, #3
 8000348:	d861      	bhi.n	800040e <Keypad_getKey+0x162>
 800034a:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <Keypad_getKey+0xa4>)
 800034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000350:	08000361 	.word	0x08000361
 8000354:	08000389 	.word	0x08000389
 8000358:	080003b1 	.word	0x080003b1
 800035c:	080003d9 	.word	0x080003d9
				{
				case 0 :
				{
					if (j == 0) return '7';
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <Keypad_getKey+0xbe>
 8000366:	2337      	movs	r3, #55	; 0x37
 8000368:	e060      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 1) return '4';
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <Keypad_getKey+0xc8>
 8000370:	2334      	movs	r3, #52	; 0x34
 8000372:	e05b      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 2) return '1';
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	2b02      	cmp	r3, #2
 8000378:	d101      	bne.n	800037e <Keypad_getKey+0xd2>
 800037a:	2331      	movs	r3, #49	; 0x31
 800037c:	e056      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 3) return '?';
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d13d      	bne.n	8000400 <Keypad_getKey+0x154>
 8000384:	233f      	movs	r3, #63	; 0x3f
 8000386:	e051      	b.n	800042c <Keypad_getKey+0x180>
					break;
				}
				case 1 :
				{
					if(j == 0) return '8';
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d101      	bne.n	8000392 <Keypad_getKey+0xe6>
 800038e:	2338      	movs	r3, #56	; 0x38
 8000390:	e04c      	b.n	800042c <Keypad_getKey+0x180>
					else if(j == 1) return '5';
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d101      	bne.n	800039c <Keypad_getKey+0xf0>
 8000398:	2335      	movs	r3, #53	; 0x35
 800039a:	e047      	b.n	800042c <Keypad_getKey+0x180>
					else if(j == 2) return '2';
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d101      	bne.n	80003a6 <Keypad_getKey+0xfa>
 80003a2:	2332      	movs	r3, #50	; 0x32
 80003a4:	e042      	b.n	800042c <Keypad_getKey+0x180>
					else if(j == 3) return '0';
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d12b      	bne.n	8000404 <Keypad_getKey+0x158>
 80003ac:	2330      	movs	r3, #48	; 0x30
 80003ae:	e03d      	b.n	800042c <Keypad_getKey+0x180>
					break;
				}
				case 2 :
				{
					if (j == 0) return '9';
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d101      	bne.n	80003ba <Keypad_getKey+0x10e>
 80003b6:	2339      	movs	r3, #57	; 0x39
 80003b8:	e038      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 1) return '6';
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d101      	bne.n	80003c4 <Keypad_getKey+0x118>
 80003c0:	2336      	movs	r3, #54	; 0x36
 80003c2:	e033      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 2) return '3';
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d101      	bne.n	80003ce <Keypad_getKey+0x122>
 80003ca:	2333      	movs	r3, #51	; 0x33
 80003cc:	e02e      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 3) return '=';
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	d119      	bne.n	8000408 <Keypad_getKey+0x15c>
 80003d4:	233d      	movs	r3, #61	; 0x3d
 80003d6:	e029      	b.n	800042c <Keypad_getKey+0x180>
					break;
				}
				case 3 :
				{
					if (j == 0) return '/';
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d101      	bne.n	80003e2 <Keypad_getKey+0x136>
 80003de:	232f      	movs	r3, #47	; 0x2f
 80003e0:	e024      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 1) return '*';
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d101      	bne.n	80003ec <Keypad_getKey+0x140>
 80003e8:	232a      	movs	r3, #42	; 0x2a
 80003ea:	e01f      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 2) return '-';
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d101      	bne.n	80003f6 <Keypad_getKey+0x14a>
 80003f2:	232d      	movs	r3, #45	; 0x2d
 80003f4:	e01a      	b.n	800042c <Keypad_getKey+0x180>
					else if (j == 3) return '+';
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	2b03      	cmp	r3, #3
 80003fa:	d107      	bne.n	800040c <Keypad_getKey+0x160>
 80003fc:	232b      	movs	r3, #43	; 0x2b
 80003fe:	e015      	b.n	800042c <Keypad_getKey+0x180>
					break;
 8000400:	bf00      	nop
 8000402:	e004      	b.n	800040e <Keypad_getKey+0x162>
					break;
 8000404:	bf00      	nop
 8000406:	e002      	b.n	800040e <Keypad_getKey+0x162>
					break;
 8000408:	bf00      	nop
 800040a:	e000      	b.n	800040e <Keypad_getKey+0x162>
					break;
 800040c:	bf00      	nop
		for(j=0;j<4;j++)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	3301      	adds	r3, #1
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2b03      	cmp	r3, #3
 8000418:	f77f af7b 	ble.w	8000312 <Keypad_getKey+0x66>
	for( i = 0; i<4;i++)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3301      	adds	r3, #1
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b03      	cmp	r3, #3
 8000426:	f77f af47 	ble.w	80002b8 <Keypad_getKey+0xc>
				}
				}
			}
		}
	}
	return 'A' ;//As default No Key pressed..
 800042a:	2341      	movs	r3, #65	; 0x41
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000010 	.word	0x20000010
 8000438:	40010c00 	.word	0x40010c00
 800043c:	20000000 	.word	0x20000000

08000440 <LCD_Send_Pulse>:
	//while(LCD_PORT >= 0x80);
	//RS IS ON
	MCAL_GPIO_WritePin(GPIOA,RS_Switch , GPIO_PIN_Set);
}
void LCD_Send_Pulse()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA,EN_Switch,GPIO_PIN_Set);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800044a:	4807      	ldr	r0, [pc, #28]	; (8000468 <LCD_Send_Pulse+0x28>)
 800044c:	f000 fa9d 	bl	800098a <MCAL_GPIO_WritePin>
//	LCD_CTRL &=~(1<<EN_Switch);
    wait_ms(50);
 8000450:	2032      	movs	r0, #50	; 0x32
 8000452:	f000 fb35 	bl	8000ac0 <wait_ms>
    MCAL_GPIO_WritePin(GPIOA, EN_Switch, GPIO_PIN_Reset);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045c:	4802      	ldr	r0, [pc, #8]	; (8000468 <LCD_Send_Pulse+0x28>)
 800045e:	f000 fa94 	bl	800098a <MCAL_GPIO_WritePin>
//	LCD_CTRL |= (1<<EN_Switch);
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800

0800046c <LCD_Init>:
void LCD_Init()
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000470:	2014      	movs	r0, #20
 8000472:	f000 fb25 	bl	8000ac0 <wait_ms>
	//Making EN_Switch pin as output PP with zero as initial state
	P_Config ->GPIO_Pin_Number = EN_Switch;
 8000476:	4b6e      	ldr	r3, [pc, #440]	; (8000630 <LCD_Init+0x1c4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800047e:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 8000480:	4b6b      	ldr	r3, [pc, #428]	; (8000630 <LCD_Init+0x1c4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2204      	movs	r2, #4
 8000486:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 8000488:	4b69      	ldr	r3, [pc, #420]	; (8000630 <LCD_Init+0x1c4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2201      	movs	r2, #1
 800048e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 8000490:	4b67      	ldr	r3, [pc, #412]	; (8000630 <LCD_Init+0x1c4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4619      	mov	r1, r3
 8000496:	4867      	ldr	r0, [pc, #412]	; (8000634 <LCD_Init+0x1c8>)
 8000498:	f000 f9d5 	bl	8000846 <MCAL_GPIO_Init>
	//Making RS_Switch pin as output PP with zero as initial state
	P_Config ->GPIO_Pin_Number = RS_Switch;
 800049c:	4b64      	ldr	r3, [pc, #400]	; (8000630 <LCD_Init+0x1c4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a4:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80004a6:	4b62      	ldr	r3, [pc, #392]	; (8000630 <LCD_Init+0x1c4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2204      	movs	r2, #4
 80004ac:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80004ae:	4b60      	ldr	r3, [pc, #384]	; (8000630 <LCD_Init+0x1c4>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2201      	movs	r2, #1
 80004b4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 80004b6:	4b5e      	ldr	r3, [pc, #376]	; (8000630 <LCD_Init+0x1c4>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	485d      	ldr	r0, [pc, #372]	; (8000634 <LCD_Init+0x1c8>)
 80004be:	f000 f9c2 	bl	8000846 <MCAL_GPIO_Init>
	//Making RW_Switch pin as output PP with zero as initial state
	P_Config ->GPIO_Pin_Number = RW_Switch;
 80004c2:	4b5b      	ldr	r3, [pc, #364]	; (8000630 <LCD_Init+0x1c4>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ca:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80004cc:	4b58      	ldr	r3, [pc, #352]	; (8000630 <LCD_Init+0x1c4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2204      	movs	r2, #4
 80004d2:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80004d4:	4b56      	ldr	r3, [pc, #344]	; (8000630 <LCD_Init+0x1c4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2201      	movs	r2, #1
 80004da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 80004dc:	4b54      	ldr	r3, [pc, #336]	; (8000630 <LCD_Init+0x1c4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	4854      	ldr	r0, [pc, #336]	; (8000634 <LCD_Init+0x1c8>)
 80004e4:	f000 f9af 	bl	8000846 <MCAL_GPIO_Init>
#ifdef Eight_Bit_MODE
	//Setting LCD PORT as OUTPUT for A0 to A7
	P_Config ->GPIO_Pin_Number = GPIO_PIN_0;
 80004e8:	4b51      	ldr	r3, [pc, #324]	; (8000630 <LCD_Init+0x1c4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2201      	movs	r2, #1
 80004ee:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80004f0:	4b4f      	ldr	r3, [pc, #316]	; (8000630 <LCD_Init+0x1c4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2204      	movs	r2, #4
 80004f6:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80004f8:	4b4d      	ldr	r3, [pc, #308]	; (8000630 <LCD_Init+0x1c4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2201      	movs	r2, #1
 80004fe:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 8000500:	4b4b      	ldr	r3, [pc, #300]	; (8000630 <LCD_Init+0x1c4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	484b      	ldr	r0, [pc, #300]	; (8000634 <LCD_Init+0x1c8>)
 8000508:	f000 f99d 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_1;
 800050c:	4b48      	ldr	r3, [pc, #288]	; (8000630 <LCD_Init+0x1c4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2202      	movs	r2, #2
 8000512:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 8000514:	4b46      	ldr	r3, [pc, #280]	; (8000630 <LCD_Init+0x1c4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2204      	movs	r2, #4
 800051a:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 800051c:	4b44      	ldr	r3, [pc, #272]	; (8000630 <LCD_Init+0x1c4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2201      	movs	r2, #1
 8000522:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 8000524:	4b42      	ldr	r3, [pc, #264]	; (8000630 <LCD_Init+0x1c4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	4842      	ldr	r0, [pc, #264]	; (8000634 <LCD_Init+0x1c8>)
 800052c:	f000 f98b 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_2;
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <LCD_Init+0x1c4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2204      	movs	r2, #4
 8000536:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 8000538:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <LCD_Init+0x1c4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2204      	movs	r2, #4
 800053e:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 8000540:	4b3b      	ldr	r3, [pc, #236]	; (8000630 <LCD_Init+0x1c4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 8000548:	4b39      	ldr	r3, [pc, #228]	; (8000630 <LCD_Init+0x1c4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	4839      	ldr	r0, [pc, #228]	; (8000634 <LCD_Init+0x1c8>)
 8000550:	f000 f979 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_3;
 8000554:	4b36      	ldr	r3, [pc, #216]	; (8000630 <LCD_Init+0x1c4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2208      	movs	r2, #8
 800055a:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 800055c:	4b34      	ldr	r3, [pc, #208]	; (8000630 <LCD_Init+0x1c4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2204      	movs	r2, #4
 8000562:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 8000564:	4b32      	ldr	r3, [pc, #200]	; (8000630 <LCD_Init+0x1c4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2201      	movs	r2, #1
 800056a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 800056c:	4b30      	ldr	r3, [pc, #192]	; (8000630 <LCD_Init+0x1c4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	4830      	ldr	r0, [pc, #192]	; (8000634 <LCD_Init+0x1c8>)
 8000574:	f000 f967 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_4;
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <LCD_Init+0x1c4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2210      	movs	r2, #16
 800057e:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <LCD_Init+0x1c4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2204      	movs	r2, #4
 8000586:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <LCD_Init+0x1c4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2201      	movs	r2, #1
 800058e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA,P_Config);
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <LCD_Init+0x1c4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4827      	ldr	r0, [pc, #156]	; (8000634 <LCD_Init+0x1c8>)
 8000598:	f000 f955 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_5;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <LCD_Init+0x1c4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2220      	movs	r2, #32
 80005a2:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <LCD_Init+0x1c4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2204      	movs	r2, #4
 80005aa:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <LCD_Init+0x1c4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2201      	movs	r2, #1
 80005b2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <LCD_Init+0x1c4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	481e      	ldr	r0, [pc, #120]	; (8000634 <LCD_Init+0x1c8>)
 80005bc:	f000 f943 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_6;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <LCD_Init+0x1c4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <LCD_Init+0x1c4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2204      	movs	r2, #4
 80005ce:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <LCD_Init+0x1c4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2201      	movs	r2, #1
 80005d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <LCD_Init+0x1c4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	4815      	ldr	r0, [pc, #84]	; (8000634 <LCD_Init+0x1c8>)
 80005e0:	f000 f931 	bl	8000846 <MCAL_GPIO_Init>
	P_Config ->GPIO_Pin_Number = GPIO_PIN_7;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <LCD_Init+0x1c4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	801a      	strh	r2, [r3, #0]
	P_Config ->GPIO_Mode = GPIO_Mode_Output_PP;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <LCD_Init+0x1c4>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2204      	movs	r2, #4
 80005f2:	709a      	strb	r2, [r3, #2]
	P_Config ->GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz ;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <LCD_Init+0x1c4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2201      	movs	r2, #1
 80005fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(GPIOA, P_Config);
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <LCD_Init+0x1c4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <LCD_Init+0x1c8>)
 8000604:	f000 f91f 	bl	8000846 <MCAL_GPIO_Init>
	wait_ms(15);
 8000608:	200f      	movs	r0, #15
 800060a:	f000 fa59 	bl	8000ac0 <wait_ms>
	LCD_Clear_Screen();
 800060e:	f000 f8ae 	bl	800076e <LCD_Clear_Screen>
	LCD_Send_Command(LCD_8bit_2Line);
 8000612:	2038      	movs	r0, #56	; 0x38
 8000614:	f000 f810 	bl	8000638 <LCD_Send_Command>
	wait_ms(15);
	LCD_Clear_Screen();
	LCD_Send_Command(0x02);
	LCD_Send_Command(LCD_4bit_2_Line);
#endif
	LCD_Send_Command(LCD_Entry_Mode);
 8000618:	2006      	movs	r0, #6
 800061a:	f000 f80d 	bl	8000638 <LCD_Send_Command>
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
 800061e:	2080      	movs	r0, #128	; 0x80
 8000620:	f000 f80a 	bl	8000638 <LCD_Send_Command>
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
 8000624:	200f      	movs	r0, #15
 8000626:	f000 f807 	bl	8000638 <LCD_Send_Command>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000040 	.word	0x20000040
 8000634:	40010800 	.word	0x40010800

08000638 <LCD_Send_Command>:
void LCD_Send_Command (unsigned char CMD)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
#ifdef Eight_Bit_MODE
	//IS_LCD_Busy();
	MCAL_GPIO_WritePort(LCD_PORT, CMD);
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <LCD_Send_Command+0x40>)
 800064a:	f000 f9b5 	bl	80009b8 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(GPIOA,RS_Switch, GPIO_PIN_Reset);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <LCD_Send_Command+0x40>)
 8000656:	f000 f998 	bl	800098a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, RW_Switch, GPIO_PIN_Reset);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <LCD_Send_Command+0x40>)
 8000662:	f000 f992 	bl	800098a <MCAL_GPIO_WritePin>
	wait_ms(20);
 8000666:	2014      	movs	r0, #20
 8000668:	f000 fa2a 	bl	8000ac0 <wait_ms>
	LCD_Send_Pulse();
 800066c:	f7ff fee8 	bl	8000440 <LCD_Send_Pulse>
	//Rs is off at CMD  Mode And RW is off
	LCD_CTRL =~((1<<RS_Switch)|(1<<RW_Switch));
	//Sending LSB Nibble
	LCD_Send_Pulse();
#endif
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40010800 	.word	0x40010800

0800067c <LCD_Send_A_Character>:
void LCD_Send_A_Character(unsigned char data)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	//IS_LCD_Busy();
#ifdef Eight_Bit_MODE
	//Putting Data on PORT
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <LCD_Send_A_Character+0x40>)
 800068e:	f000 f993 	bl	80009b8 <MCAL_GPIO_WritePort>
	//Rs is on at Data mode
	MCAL_GPIO_WritePin(GPIOA, RS_Switch, GPIO_PIN_Set);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <LCD_Send_A_Character+0x40>)
 800069a:	f000 f976 	bl	800098a <MCAL_GPIO_WritePin>
	//Rw is off at Data mode
	MCAL_GPIO_WritePin(GPIOA, RW_Switch, GPIO_PIN_Reset);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <LCD_Send_A_Character+0x40>)
 80006a6:	f000 f970 	bl	800098a <MCAL_GPIO_WritePin>
	//Sending Data
	wait_ms(20);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f000 fa08 	bl	8000ac0 <wait_ms>
	LCD_Send_Pulse();
 80006b0:	f7ff fec6 	bl	8000440 <LCD_Send_Pulse>
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
	//Send MSB NIbble
	LCD_Send_Pulse();
#endif
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40010800 	.word	0x40010800

080006c0 <LCD_Send_A_String>:
void LCD_Send_A_String(char * str)
{ 
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	int i ;  
	for(i=0;str[i] != '\0' ; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e01a      	b.n	8000704 <LCD_Send_A_String+0x44>
	{
		LCD_Send_A_Character(str[i]);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffd0 	bl	800067c <LCD_Send_A_Character>
		if(i==16)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	2b10      	cmp	r3, #16
 80006e0:	d104      	bne.n	80006ec <LCD_Send_A_String+0x2c>
		{
			LCD_Goto_XY(2,1);
 80006e2:	2101      	movs	r1, #1
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f817 	bl	8000718 <LCD_Goto_XY>
 80006ea:	e008      	b.n	80006fe <LCD_Send_A_String+0x3e>
		}
		else if ( i == 32)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b20      	cmp	r3, #32
 80006f0:	d105      	bne.n	80006fe <LCD_Send_A_String+0x3e>
		{
			LCD_Clear_Screen();
 80006f2:	f000 f83c 	bl	800076e <LCD_Clear_Screen>
			LCD_Goto_XY(1,1);
 80006f6:	2101      	movs	r1, #1
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 f80d 	bl	8000718 <LCD_Goto_XY>
	for(i=0;str[i] != '\0' ; i++)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1de      	bne.n	80006ce <LCD_Send_A_String+0xe>
		}
	}

}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <LCD_Goto_XY>:
void LCD_Goto_XY(unsigned char row , unsigned char column)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d10c      	bne.n	8000748 <LCD_Goto_XY+0x30>
	{
		if(column > 0 && column < 16 )
 800072e:	79bb      	ldrb	r3, [r7, #6]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d018      	beq.n	8000766 <LCD_Goto_XY+0x4e>
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	2b0f      	cmp	r3, #15
 8000738:	d815      	bhi.n	8000766 <LCD_Goto_XY+0x4e>
			LCD_Send_Command(0x80+column);
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	3b80      	subs	r3, #128	; 0x80
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff79 	bl	8000638 <LCD_Send_Command>
	else if( row == 2)
	{
		if(column > 0 && column < 16 )
			LCD_Send_Command(0xC0+column);
	}
}
 8000746:	e00e      	b.n	8000766 <LCD_Goto_XY+0x4e>
	else if( row == 2)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d10b      	bne.n	8000766 <LCD_Goto_XY+0x4e>
		if(column > 0 && column < 16 )
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d008      	beq.n	8000766 <LCD_Goto_XY+0x4e>
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	2b0f      	cmp	r3, #15
 8000758:	d805      	bhi.n	8000766 <LCD_Goto_XY+0x4e>
			LCD_Send_Command(0xC0+column);
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	3b40      	subs	r3, #64	; 0x40
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff69 	bl	8000638 <LCD_Send_Command>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <LCD_Clear_Screen>:
void LCD_Clear_Screen()
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
	LCD_Send_Command(LCD_Clear_Display);
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff60 	bl	8000638 <LCD_Send_Command>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <Get_CRLH_Position>:

#include "STM32F103C6_GPIO_Driver.h"
S_RCC_t * PTR = RCC;
 //This Function will not be available to user
uint8_t Get_CRLH_Position (uint16_t Pin_Number)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	80fb      	strh	r3, [r7, #6]
	switch(Pin_Number)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	2b08      	cmp	r3, #8
 800078a:	d01a      	beq.n	80007c2 <Get_CRLH_Position+0x46>
 800078c:	2b08      	cmp	r3, #8
 800078e:	dc06      	bgt.n	800079e <Get_CRLH_Position+0x22>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d012      	beq.n	80007ba <Get_CRLH_Position+0x3e>
 8000794:	2b04      	cmp	r3, #4
 8000796:	d012      	beq.n	80007be <Get_CRLH_Position+0x42>
 8000798:	2b01      	cmp	r3, #1
 800079a:	d00c      	beq.n	80007b6 <Get_CRLH_Position+0x3a>
 800079c:	e01b      	b.n	80007d6 <Get_CRLH_Position+0x5a>
 800079e:	2b20      	cmp	r3, #32
 80007a0:	d013      	beq.n	80007ca <Get_CRLH_Position+0x4e>
 80007a2:	2b20      	cmp	r3, #32
 80007a4:	dc02      	bgt.n	80007ac <Get_CRLH_Position+0x30>
 80007a6:	2b10      	cmp	r3, #16
 80007a8:	d00d      	beq.n	80007c6 <Get_CRLH_Position+0x4a>
 80007aa:	e014      	b.n	80007d6 <Get_CRLH_Position+0x5a>
 80007ac:	2b40      	cmp	r3, #64	; 0x40
 80007ae:	d00e      	beq.n	80007ce <Get_CRLH_Position+0x52>
 80007b0:	2b80      	cmp	r3, #128	; 0x80
 80007b2:	d00e      	beq.n	80007d2 <Get_CRLH_Position+0x56>
 80007b4:	e00f      	b.n	80007d6 <Get_CRLH_Position+0x5a>
	{
	case GPIO_PIN_0: return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e040      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_1: return 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	e03e      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_2: return 8;
 80007be:	2308      	movs	r3, #8
 80007c0:	e03c      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_3: return 12;
 80007c2:	230c      	movs	r3, #12
 80007c4:	e03a      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_4: return 16;
 80007c6:	2310      	movs	r3, #16
 80007c8:	e038      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_5: return 20;
 80007ca:	2314      	movs	r3, #20
 80007cc:	e036      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_6: return 24;
 80007ce:	2318      	movs	r3, #24
 80007d0:	e034      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_7: return 28;
 80007d2:	231c      	movs	r3, #28
 80007d4:	e032      	b.n	800083c <Get_CRLH_Position+0xc0>
	}
	switch(Pin_Number)
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007dc:	d023      	beq.n	8000826 <Get_CRLH_Position+0xaa>
 80007de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007e2:	dc09      	bgt.n	80007f8 <Get_CRLH_Position+0x7c>
 80007e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007e8:	d019      	beq.n	800081e <Get_CRLH_Position+0xa2>
 80007ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007ee:	d018      	beq.n	8000822 <Get_CRLH_Position+0xa6>
 80007f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007f4:	d011      	beq.n	800081a <Get_CRLH_Position+0x9e>
 80007f6:	e020      	b.n	800083a <Get_CRLH_Position+0xbe>
 80007f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007fc:	d017      	beq.n	800082e <Get_CRLH_Position+0xb2>
 80007fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000802:	dc03      	bgt.n	800080c <Get_CRLH_Position+0x90>
 8000804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000808:	d00f      	beq.n	800082a <Get_CRLH_Position+0xae>
 800080a:	e016      	b.n	800083a <Get_CRLH_Position+0xbe>
 800080c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000810:	d00f      	beq.n	8000832 <Get_CRLH_Position+0xb6>
 8000812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000816:	d00e      	beq.n	8000836 <Get_CRLH_Position+0xba>
 8000818:	e00f      	b.n	800083a <Get_CRLH_Position+0xbe>
	{
	case GPIO_PIN_8: return 0;
 800081a:	2300      	movs	r3, #0
 800081c:	e00e      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_9: return 4;
 800081e:	2304      	movs	r3, #4
 8000820:	e00c      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_10: return 8;
 8000822:	2308      	movs	r3, #8
 8000824:	e00a      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_11: return 12;
 8000826:	230c      	movs	r3, #12
 8000828:	e008      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_12: return 16;
 800082a:	2310      	movs	r3, #16
 800082c:	e006      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_13: return 20;
 800082e:	2314      	movs	r3, #20
 8000830:	e004      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_14: return 24;
 8000832:	2318      	movs	r3, #24
 8000834:	e002      	b.n	800083c <Get_CRLH_Position+0xc0>
	case GPIO_PIN_15: return 28;
 8000836:	231c      	movs	r3, #28
 8000838:	e000      	b.n	800083c <Get_CRLH_Position+0xc0>
	}
	return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <MCAL_GPIO_Init>:
 * @param [in] 		-pointer to structure that  include pin config //input output pin number pin speed//
 * @retval 			-None
 * Note-
 */
void MCAL_GPIO_Init (S_GPIO_t * GPIOx , GPIO_Pin_Config_t * P_Config)
{
 8000846:	b590      	push	{r4, r7, lr}
 8000848:	b085      	sub	sp, #20
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	//Port Configuration register low (GPIOx_CRL) Configure PINS From 0 to 7
	//Port Configuration register High (GPIOx_CRH) Configure PINS From 8 to 15
	volatile uint32_t * Config_Register = NULL;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
	//Initializing PIN_Config variable info of pin in its LSB Nibble
	uint8_t PIN_Config = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
	//Checking if pin is in range of CRL or CRH
	Config_Register = (P_Config->GPIO_Pin_Number < GPIO_PIN_8) ? &GPIOx->CRL : & GPIOx->CRH ;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	2bff      	cmp	r3, #255	; 0xff
 800085e:	d801      	bhi.n	8000864 <MCAL_GPIO_Init+0x1e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	e001      	b.n	8000868 <MCAL_GPIO_Init+0x22>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3304      	adds	r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
	//We need to set 4 bits of specified pin to be zero
	(*Config_Register) &= ~ (0xf << Get_CRLH_Position( P_Config->GPIO_Pin_Number));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff84 	bl	800077c <Get_CRLH_Position>
 8000874:	4603      	mov	r3, r0
 8000876:	461a      	mov	r2, r3
 8000878:	230f      	movs	r3, #15
 800087a:	4093      	lsls	r3, r2
 800087c:	43da      	mvns	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	401a      	ands	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	601a      	str	r2, [r3, #0]
	//if Pin is Output
	if(P_Config->GPIO_Mode == GPIO_Mode_Output_AF_OD || P_Config->GPIO_Mode == GPIO_Mode_Output_AF_PP ||
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	2b07      	cmp	r3, #7
 800088e:	d00b      	beq.n	80008a8 <MCAL_GPIO_Init+0x62>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	2b06      	cmp	r3, #6
 8000896:	d007      	beq.n	80008a8 <MCAL_GPIO_Init+0x62>
			P_Config->GPIO_Mode == GPIO_Mode_Output_OD || P_Config->GPIO_Mode == GPIO_Mode_Output_PP)
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	789b      	ldrb	r3, [r3, #2]
	if(P_Config->GPIO_Mode == GPIO_Mode_Output_AF_OD || P_Config->GPIO_Mode == GPIO_Mode_Output_AF_PP ||
 800089c:	2b05      	cmp	r3, #5
 800089e:	d003      	beq.n	80008a8 <MCAL_GPIO_Init+0x62>
			P_Config->GPIO_Mode == GPIO_Mode_Output_OD || P_Config->GPIO_Mode == GPIO_Mode_Output_PP)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	789b      	ldrb	r3, [r3, #2]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d10e      	bne.n	80008c6 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ((((P_Config->GPIO_Mode-4)<<2) | (P_Config->GPIO_OUTPUT_Speed)) & 0x0f);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	3b04      	subs	r3, #4
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	b25a      	sxtb	r2, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	78db      	ldrb	r3, [r3, #3]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e038      	b.n	8000938 <MCAL_GPIO_Init+0xf2>
	}
	//if Pin is INPUT
	else
	{
		if(P_Config->GPIO_Mode == GPIO_Mode_Analog || P_Config->GPIO_Mode == GPIO_Mode_Input_FLO
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d007      	beq.n	80008de <MCAL_GPIO_Init+0x98>
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	789b      	ldrb	r3, [r3, #2]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d003      	beq.n	80008de <MCAL_GPIO_Init+0x98>
				|| P_Config->GPIO_Mode == GPIO_Mode_AF_Input)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	2b08      	cmp	r3, #8
 80008dc:	d107      	bne.n	80008ee <MCAL_GPIO_Init+0xa8>
		{
			PIN_Config = ((((P_Config->GPIO_Mode)<<2) | (0x0)) & 0x0f);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	73fb      	strb	r3, [r7, #15]
 80008ec:	e024      	b.n	8000938 <MCAL_GPIO_Init+0xf2>

		}
		else
		{
			PIN_Config = ((((GPIO_Mode_Input_PU)<<2) | 0x0) & 0x0f);
 80008ee:	2308      	movs	r3, #8
 80008f0:	73fb      	strb	r3, [r7, #15]
			if(P_Config->GPIO_Mode == GPIO_Mode_Input_PU)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d10f      	bne.n	800091a <MCAL_GPIO_Init+0xd4>
			{
				//Setting ODR as output make this pin PUll  UP input
				GPIOx->ODR |= (1<<Get_CRLH_Position(P_Config->GPIO_Pin_Number));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff3c 	bl	800077c <Get_CRLH_Position>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	2301      	movs	r3, #1
 800090a:	fa03 f202 	lsl.w	r2, r3, r2
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	431a      	orrs	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	e00e      	b.n	8000938 <MCAL_GPIO_Init+0xf2>
			}
			else
			{
				//Setting ODR to zero makes this pin pull down input
				GPIOx->ODR &= ~(1<<Get_CRLH_Position(P_Config->GPIO_Pin_Number));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff2c 	bl	800077c <Get_CRLH_Position>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	2301      	movs	r3, #1
 800092a:	4093      	lsls	r3, r2
 800092c:	43da      	mvns	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	401a      	ands	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//Write on CRL or CRH
	(*Config_Register) |= (PIN_Config << Get_CRLH_Position(P_Config->GPIO_Pin_Number));
 8000938:	7bfc      	ldrb	r4, [r7, #15]
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff1c 	bl	800077c <Get_CRLH_Position>
 8000944:	4603      	mov	r3, r0
 8000946:	fa04 f203 	lsl.w	r2, r4, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	431a      	orrs	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	601a      	str	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}

0800095c <MCAL_GPIO_ReadPin>:
 * @param [in]		-Set Pin Number that you want to read
 * @retval 			-Input Pin Status (based on @ref GPIO_PIN_)
 * Note-
 */
uint8_t MCAL_GPIO_ReadPin(S_GPIO_t * GPIOx, uint16_t Pin_Number)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	uint8_t Bit_Status;
	if((GPIOx->IDR & Pin_Number) !=  (uint32_t)GPIO_PIN_Reset)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	887b      	ldrh	r3, [r7, #2]
 800096e:	4013      	ands	r3, r2
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <MCAL_GPIO_ReadPin+0x1e>
	{
		Bit_Status = GPIO_PIN_Set;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e001      	b.n	800097e <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		Bit_Status = GPIO_PIN_Reset;
 800097a:	2300      	movs	r3, #0
 800097c:	73fb      	strb	r3, [r7, #15]
	}

	return Bit_Status;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr

0800098a <MCAL_GPIO_WritePin>:
 * @retval 			-None
 * Note-             -None
 */

void MCAL_GPIO_WritePin (S_GPIO_t * GPIOx , uint16_t  Pin_Number , uint8_t value )
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	460b      	mov	r3, r1
 8000994:	807b      	strh	r3, [r7, #2]
 8000996:	4613      	mov	r3, r2
 8000998:	707b      	strb	r3, [r7, #1]
	if( value != GPIO_PIN_Reset)
 800099a:	787b      	ldrb	r3, [r7, #1]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <MCAL_GPIO_WritePin+0x1e>
		//Note: If both BSx and BRx are set, BSx has priority.
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)Pin_Number;
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	611a      	str	r2, [r3, #16]
		//1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)Pin_Number;
	}


}
 80009a6:	e002      	b.n	80009ae <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)Pin_Number;
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	615a      	str	r2, [r3, #20]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <MCAL_GPIO_WritePort>:
 * @param [in] 		-GPIO  in which the Port you want to write on  exists
 * @retval 			-None
 * Note-             -None
 */
void MCAL_GPIO_WritePort (S_GPIO_t * GPIOx , uint16_t value)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)(value);
 80009c4:	887a      	ldrh	r2, [r7, #2]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <clock_init>:
#define Six		0x02
#define Seven	0x78
#define Eight	0x00
#define Nine	0x18
void clock_init()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();  // Enable GPIOA Clock
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <clock_init+0x2c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <clock_init+0x2c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0204 	orr.w	r2, r2, #4
 80009e6:	619a      	str	r2, [r3, #24]
	RCC_GPIOB_CLK_EN();   //Enable GPIOB Clock
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <clock_init+0x2c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <clock_init+0x2c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0208 	orr.w	r2, r2, #8
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000020 	.word	0x20000020

08000a04 <Gpio_init>:
void Gpio_init(){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
	GPIO_Pin_Config_t Pin_Cfg;
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_9 ;
 8000a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a0e:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a10:	2304      	movs	r3, #4
 8000a12:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a14:	2301      	movs	r3, #1
 8000a16:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4827      	ldr	r0, [pc, #156]	; (8000abc <Gpio_init+0xb8>)
 8000a1e:	f7ff ff12 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_10 ;
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4821      	ldr	r0, [pc, #132]	; (8000abc <Gpio_init+0xb8>)
 8000a36:	f7ff ff06 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_11 ;
 8000a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a3e:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a40:	2304      	movs	r3, #4
 8000a42:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a44:	2301      	movs	r3, #1
 8000a46:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481b      	ldr	r0, [pc, #108]	; (8000abc <Gpio_init+0xb8>)
 8000a4e:	f7ff fefa 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_12 ;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4815      	ldr	r0, [pc, #84]	; (8000abc <Gpio_init+0xb8>)
 8000a66:	f7ff feee 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_13 ;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6e:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a70:	2304      	movs	r3, #4
 8000a72:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a74:	2301      	movs	r3, #1
 8000a76:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <Gpio_init+0xb8>)
 8000a7e:	f7ff fee2 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_14 ;
 8000a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a86:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <Gpio_init+0xb8>)
 8000a96:	f7ff fed6 	bl	8000846 <MCAL_GPIO_Init>
	Pin_Cfg.GPIO_Pin_Number = GPIO_PIN_15 ;
 8000a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a9e:	80bb      	strh	r3, [r7, #4]
	Pin_Cfg.GPIO_Mode = GPIO_Mode_Output_PP;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	71bb      	strb	r3, [r7, #6]
	Pin_Cfg.GPIO_OUTPUT_Speed = GPIO_SPEED_10MHz;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &Pin_Cfg);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <Gpio_init+0xb8>)
 8000aae:	f7ff feca 	bl	8000846 <MCAL_GPIO_Init>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010c00 	.word	0x40010c00

08000ac0 <wait_ms>:
void wait_ms(uint32_t time)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e00b      	b.n	8000ae6 <wait_ms+0x26>
		for(j=0;j<255;j++);
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	e002      	b.n	8000ada <wait_ms+0x1a>
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	2bfe      	cmp	r3, #254	; 0xfe
 8000ade:	d9f9      	bls.n	8000ad4 <wait_ms+0x14>
	for(i=0;i<time;i++)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3ef      	bcc.n	8000ace <wait_ms+0xe>
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <main>:
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

	clock_init();
 8000afe:	f7ff ff69 	bl	80009d4 <clock_init>
	Gpio_init();
 8000b02:	f7ff ff7f 	bl	8000a04 <Gpio_init>
	LCD_Init();
 8000b06:	f7ff fcb1 	bl	800046c <LCD_Init>
	unsigned char seg[] = {Zero,One,Two,Three,Four,Five,Six,Seven,Eight,Nine,Zero};
 8000b0a:	4a29      	ldr	r2, [pc, #164]	; (8000bb0 <main+0xb8>)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b12:	c303      	stmia	r3!, {r0, r1}
 8000b14:	801a      	strh	r2, [r3, #0]
 8000b16:	3302      	adds	r3, #2
 8000b18:	0c12      	lsrs	r2, r2, #16
 8000b1a:	701a      	strb	r2, [r3, #0]
	unsigned char lcd[] = {'0','1','2','3','4','5','6','7','8','9','0'};
 8000b1c:	4a25      	ldr	r2, [pc, #148]	; (8000bb4 <main+0xbc>)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b22:	c303      	stmia	r3!, {r0, r1}
 8000b24:	801a      	strh	r2, [r3, #0]
 8000b26:	3302      	adds	r3, #2
 8000b28:	0c12      	lsrs	r2, r2, #16
 8000b2a:	701a      	strb	r2, [r3, #0]
	for(unsigned char i = 0 ; i< 11 ; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	77fb      	strb	r3, [r7, #31]
 8000b30:	e01b      	b.n	8000b6a <main+0x72>
	{
		MCAL_GPIO_WritePort(GPIOB, seg[i]<<9);
 8000b32:	7ffb      	ldrb	r3, [r7, #31]
 8000b34:	f107 0220 	add.w	r2, r7, #32
 8000b38:	4413      	add	r3, r2
 8000b3a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	481c      	ldr	r0, [pc, #112]	; (8000bb8 <main+0xc0>)
 8000b48:	f7ff ff36 	bl	80009b8 <MCAL_GPIO_WritePort>
		LCD_Send_A_Character(lcd[i]);
 8000b4c:	7ffb      	ldrb	r3, [r7, #31]
 8000b4e:	f107 0220 	add.w	r2, r7, #32
 8000b52:	4413      	add	r3, r2
 8000b54:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd8f 	bl	800067c <LCD_Send_A_Character>
		wait_ms(100);
 8000b5e:	2064      	movs	r0, #100	; 0x64
 8000b60:	f7ff ffae 	bl	8000ac0 <wait_ms>
	for(unsigned char i = 0 ; i< 11 ; i++)
 8000b64:	7ffb      	ldrb	r3, [r7, #31]
 8000b66:	3301      	adds	r3, #1
 8000b68:	77fb      	strb	r3, [r7, #31]
 8000b6a:	7ffb      	ldrb	r3, [r7, #31]
 8000b6c:	2b0a      	cmp	r3, #10
 8000b6e:	d9e0      	bls.n	8000b32 <main+0x3a>
	}
	LCD_Clear_Screen();
 8000b70:	f7ff fdfd 	bl	800076e <LCD_Clear_Screen>
	keypad_init();
 8000b74:	f7ff fafc 	bl	8000170 <keypad_init>
	LCD_Send_A_String("LCD IS Ready");
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <main+0xc4>)
 8000b7a:	f7ff fda1 	bl	80006c0 <LCD_Send_A_String>
	char Keypressed;
	LCD_Init();
 8000b7e:	f7ff fc75 	bl	800046c <LCD_Init>
	keypad_init();
 8000b82:	f7ff faf5 	bl	8000170 <keypad_init>
	while (1)
	{
		Keypressed = Keypad_getKey();
 8000b86:	f7ff fb91 	bl	80002ac <Keypad_getKey>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	77bb      	strb	r3, [r7, #30]
		switch(Keypressed)
 8000b8e:	7fbb      	ldrb	r3, [r7, #30]
 8000b90:	2b3f      	cmp	r3, #63	; 0x3f
 8000b92:	d002      	beq.n	8000b9a <main+0xa2>
 8000b94:	2b41      	cmp	r3, #65	; 0x41
 8000b96:	d008      	beq.n	8000baa <main+0xb2>
 8000b98:	e002      	b.n	8000ba0 <main+0xa8>
		{
		case  ('A'): break; //No Key Pressed
		case  ('?'): LCD_Clear_Screen();break;
 8000b9a:	f7ff fde8 	bl	800076e <LCD_Clear_Screen>
 8000b9e:	e005      	b.n	8000bac <main+0xb4>
		default: LCD_Send_A_Character(Keypressed);break;
 8000ba0:	7fbb      	ldrb	r3, [r7, #30]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fd6a 	bl	800067c <LCD_Send_A_Character>
 8000ba8:	e000      	b.n	8000bac <main+0xb4>
		case  ('A'): break; //No Key Pressed
 8000baa:	bf00      	nop
		Keypressed = Keypad_getKey();
 8000bac:	e7eb      	b.n	8000b86 <main+0x8e>
 8000bae:	bf00      	nop
 8000bb0:	08000c84 	.word	0x08000c84
 8000bb4:	08000c90 	.word	0x08000c90
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	08000c74 	.word	0x08000c74

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bc4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bee:	f000 f811 	bl	8000c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff ff81 	bl	8000af8 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c04:	08000ca4 	.word	0x08000ca4
  ldr r2, =_sbss
 8000c08:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c0c:	20000044 	.word	0x20000044

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <__libc_init_array>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	2500      	movs	r5, #0
 8000c18:	4e0c      	ldr	r6, [pc, #48]	; (8000c4c <__libc_init_array+0x38>)
 8000c1a:	4c0d      	ldr	r4, [pc, #52]	; (8000c50 <__libc_init_array+0x3c>)
 8000c1c:	1ba4      	subs	r4, r4, r6
 8000c1e:	10a4      	asrs	r4, r4, #2
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	d109      	bne.n	8000c38 <__libc_init_array+0x24>
 8000c24:	f000 f81a 	bl	8000c5c <_init>
 8000c28:	2500      	movs	r5, #0
 8000c2a:	4e0a      	ldr	r6, [pc, #40]	; (8000c54 <__libc_init_array+0x40>)
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <__libc_init_array+0x44>)
 8000c2e:	1ba4      	subs	r4, r4, r6
 8000c30:	10a4      	asrs	r4, r4, #2
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d105      	bne.n	8000c42 <__libc_init_array+0x2e>
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c3c:	4798      	blx	r3
 8000c3e:	3501      	adds	r5, #1
 8000c40:	e7ee      	b.n	8000c20 <__libc_init_array+0xc>
 8000c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c46:	4798      	blx	r3
 8000c48:	3501      	adds	r5, #1
 8000c4a:	e7f2      	b.n	8000c32 <__libc_init_array+0x1e>
 8000c4c:	08000c9c 	.word	0x08000c9c
 8000c50:	08000c9c 	.word	0x08000c9c
 8000c54:	08000c9c 	.word	0x08000c9c
 8000c58:	08000ca0 	.word	0x08000ca0

08000c5c <_init>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr

08000c68 <_fini>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr
