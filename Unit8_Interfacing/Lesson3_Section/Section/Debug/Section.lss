
Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000672  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d5  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000986  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  0000221b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000688  00000000  00000000  0000338e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  8a:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IS_LCD_Busy>:
	#ifdef Eight_Bit_MODE
	//Setting LCD PORT As Input
	DataDir_LCD_PORT = 0x00; 
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |=(0xff<< Data_Shift);
  92:	8a b3       	in	r24, 0x1a	; 26
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	8a bb       	out	0x1a, r24	; 26
	#endif
	//Setting Control in Read Mode
	LCD_CTRL |= (1<<RW_Switch);
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	88 bb       	out	0x18, r24	; 24
	//Rs Is off in Command Mode
	LCD_CTRL &= ~(1<<RS_Switch);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	88 bb       	out	0x18, r24	; 24
	//while(LCD_PORT >= 0x80);
	LCD_CTRL |= (1<<RS_Switch);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_Send_Pulse>:
}
void LCD_Send_Pulse()
{
	LCD_CTRL &=~(1<<EN_Switch);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e7       	ldi	r18, 0x7F	; 127
  b4:	88 e3       	ldi	r24, 0x38	; 56
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <LCD_Send_Pulse+0xc>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Send_Pulse+0x16>
  c2:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_Switch);	
  c4:	88 b3       	in	r24, 0x18	; 24
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	88 bb       	out	0x18, r24	; 24
  ca:	08 95       	ret

000000cc <LCD_Send_Command>:
	LCD_Send_Command(LCD_Entry_Mode);
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
}
void LCD_Send_Command (unsigned char CMD)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	c8 2f       	mov	r28, r24
	LCD_PORT = CMD;
	LCD_CTRL &= ~((1<<RS_Switch)|(1<<RW_Switch));
	LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	IS_LCD_Busy();
  d2:	0e 94 49 00 	call	0x92	; 0x92 <IS_LCD_Busy>
	LCD_PORT =  ((LCD_PORT & 0x0F) | (CMD & 0xF0));
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	9c 2f       	mov	r25, r28
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off 
	LCD_CTRL =~((1<<RS_Switch)|(1<<RW_Switch));
  e2:	d9 ef       	ldi	r29, 0xF9	; 249
  e4:	d8 bb       	out	0x18, r29	; 24
	//Sending MSB Nibble
	LCD_Send_Pulse();
  e6:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_Pulse>
	LCD_PORT = ((LCD_PORT & 0x0F) | (CMD << Data_Shift)) ;
  ea:	2b b3       	in	r18, 0x1b	; 27
  ec:	30 e1       	ldi	r19, 0x10	; 16
  ee:	c3 9f       	mul	r28, r19
  f0:	c0 01       	movw	r24, r0
  f2:	11 24       	eor	r1, r1
  f4:	92 2f       	mov	r25, r18
  f6:	9f 70       	andi	r25, 0x0F	; 15
  f8:	89 2b       	or	r24, r25
  fa:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off
	LCD_CTRL =~((1<<RS_Switch)|(1<<RW_Switch));
  fc:	d8 bb       	out	0x18, r29	; 24
    //Sending LSB Nibble
	LCD_Send_Pulse();
  fe:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_Pulse>
	#endif
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_Send_A_Character>:
void LCD_Send_A_Character(unsigned char data)
{
 108:	cf 93       	push	r28
 10a:	c8 2f       	mov	r28, r24
	 IS_LCD_Busy();
 10c:	0e 94 49 00 	call	0x92	; 0x92 <IS_LCD_Busy>
	 //Sending Data  
	 LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	//Putting MSB Nibble on PORT
	LCD_PORT = (LCD_PORT & 0x0F)|(data & 0xF0);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	9c 2f       	mov	r25, r28
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
	//RS is on at read mode
	LCD_CTRL |= (1<<RS_Switch);
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	88 bb       	out	0x18, r24	; 24
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
 122:	88 b3       	in	r24, 0x18	; 24
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	88 bb       	out	0x18, r24	; 24
	//Send MSB NIbble 
	LCD_Send_Pulse();
 128:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_Pulse>
	//Putting LSB Nibble on Port
	LCD_PORT =(LCD_PORT & 0x0F)|(data << Data_Shift);
 12c:	2b b3       	in	r18, 0x1b	; 27
 12e:	30 e1       	ldi	r19, 0x10	; 16
 130:	c3 9f       	mul	r28, r19
 132:	c0 01       	movw	r24, r0
 134:	11 24       	eor	r1, r1
 136:	92 2f       	mov	r25, r18
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	8b bb       	out	0x1b, r24	; 27
	//RS is on at read mode
	LCD_CTRL |= (1<<RS_Switch);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	82 60       	ori	r24, 0x02	; 2
 142:	88 bb       	out	0x18, r24	; 24
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
 144:	88 b3       	in	r24, 0x18	; 24
 146:	8b 7f       	andi	r24, 0xFB	; 251
 148:	88 bb       	out	0x18, r24	; 24
	//Send MSB NIbble
	LCD_Send_Pulse();
 14a:	0e 94 56 00 	call	0xac	; 0xac <LCD_Send_Pulse>
    #endif
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Goto_XY>:
	}
	
}
void LCD_Goto_XY(unsigned char row , unsigned char column)
{
	if(row == 1)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	39 f4       	brne	.+14     	; 0x164 <LCD_Goto_XY+0x12>
	{
		if(column >= 0 && column <= 16 )
 156:	61 31       	cpi	r22, 0x11	; 17
 158:	68 f4       	brcc	.+26     	; 0x174 <LCD_Goto_XY+0x22>
		LCD_Send_Command(0x80+column);
 15a:	80 e8       	ldi	r24, 0x80	; 128
 15c:	86 0f       	add	r24, r22
 15e:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
 162:	08 95       	ret
	}
	else if( row == 2)
 164:	82 30       	cpi	r24, 0x02	; 2
 166:	31 f4       	brne	.+12     	; 0x174 <LCD_Goto_XY+0x22>
	{
		if(column >= 0 && column <= 16 )
 168:	61 31       	cpi	r22, 0x11	; 17
 16a:	20 f4       	brcc	.+8      	; 0x174 <LCD_Goto_XY+0x22>
		LCD_Send_Command(0xC0+column);
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	86 0f       	add	r24, r22
 170:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
 174:	08 95       	ret

00000176 <LCD_Clear_Screen>:
	}
}
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_Clear_Display);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
 17c:	08 95       	ret

0000017e <LCD_Init>:
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Init+0x4>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Init+0xa>
 188:	00 00       	nop
}
void LCD_Init()
{
	_delay_ms(20);
	//Setting Control pins as output 
	DataDir_LCD_CTRL |=((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 18a:	87 b3       	in	r24, 0x17	; 23
 18c:	8e 60       	ori	r24, 0x0E	; 14
 18e:	87 bb       	out	0x17, r24	; 23
	//Masking off CTRL bits
	LCD_CTRL &=~((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 190:	88 b3       	in	r24, 0x18	; 24
 192:	81 7f       	andi	r24, 0xF1	; 241
 194:	88 bb       	out	0x18, r24	; 24
	_delay_ms(15);
	LCD_Clear_Screen();
	LCD_Send_Command(LCD_8bit_2Line);
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |= 0x0f;
 196:	8a b3       	in	r24, 0x1a	; 26
 198:	8f 60       	ori	r24, 0x0F	; 15
 19a:	8a bb       	out	0x1a, r24	; 26
 19c:	8f e2       	ldi	r24, 0x2F	; 47
 19e:	95 e7       	ldi	r25, 0x75	; 117
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x22>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x28>
 1a6:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 1a8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Clear_Screen>
	LCD_Send_Command(0x02);
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
	LCD_Send_Command(LCD_4bit_2_Line);
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
	#endif
	LCD_Send_Command(LCD_Entry_Mode);
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
 1c4:	8f e0       	ldi	r24, 0x0F	; 15
 1c6:	0e 94 66 00 	call	0xcc	; 0xcc <LCD_Send_Command>
 1ca:	08 95       	ret

000001cc <GP_CallBack_UART>:
#include "LCD.h"
#include "avr/delay.h"
int j=0;
void GP_CallBack_UART(void)
{
	LCD_Goto_XY(2,j);
 1cc:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <__data_end>
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Goto_XY>
	LCD_Send_A_Character((uint8_t)(MCAL_UART_receiveData(UART_Enable)));
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 82 02 	call	0x504	; 0x504 <MCAL_UART_receiveData>
 1dc:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Send_A_Character>
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	98 e1       	ldi	r25, 0x18	; 24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <GP_CallBack_UART+0x1a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <GP_CallBack_UART+0x24>
 1f0:	00 00       	nop
	_delay_ms(1000);
	j++;
 1f2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1f6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 200:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 204:	08 95       	ret

00000206 <USART>:
}
void USART(void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	2c 97       	sbiw	r28, 0x0c	; 12
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	S_UART_Config_t  UART;
	UART.USART_BaudRate = 51; //For 9600 baudrate
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	a0 e0       	ldi	r26, 0x00	; 0
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	8b 83       	std	Y+3, r24	; 0x03
 224:	9c 83       	std	Y+4, r25	; 0x04
 226:	ad 83       	std	Y+5, r26	; 0x05
 228:	be 83       	std	Y+6, r27	; 0x06
	UART.Pay_Load_Length = UART_Payload_Length_8bits;
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	8f 83       	std	Y+7, r24	; 0x07
	UART.USART_Mode = UART_Mode_RX_TX;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	8a 83       	std	Y+2, r24	; 0x02
	UART.USART_Type = USART_Type_Asynchronous;
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	99 83       	std	Y+1, r25	; 0x01
	UART.Parity = UART_Parity_Disable;
 236:	18 86       	std	Y+8, r1	; 0x08
	UART.UART_IRQ_Enable = UART_IRQ_RXEnable;
 238:	8a 87       	std	Y+10, r24	; 0x0a
	UART.P_IRQ_CallBack = GP_CallBack_UART;
 23a:	86 ee       	ldi	r24, 0xE6	; 230
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	9c 87       	std	Y+12, r25	; 0x0c
 240:	8b 87       	std	Y+11, r24	; 0x0b
	MCAL_UART_Init(&UART);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 72 01 	call	0x2e4	; 0x2e4 <MCAL_UART_Init>
}
 24a:	2c 96       	adiw	r28, 0x0c	; 12
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <main>:
char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	2a 97       	sbiw	r28, 0x0a	; 10
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
	int i =0;
	USART();
 270:	0e 94 03 01 	call	0x206	; 0x206 <USART>
	LCD_Init() ;
 274:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Init>
	LCD_Clear_Screen();
 278:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Clear_Screen>
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	84 e3       	ldi	r24, 0x34	; 52
 280:	9c e0       	ldi	r25, 0x0C	; 12
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x26>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x30>
 28c:	00 00       	nop
    _delay_ms(500);
	char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	e2 e6       	ldi	r30, 0x62	; 98
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	de 01       	movw	r26, r28
 296:	11 96       	adiw	r26, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	8a 95       	dec	r24
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x3c>
	MCAL_UART_Init(&UART);
}
char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
int main(void)
{
	int i =0;
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Clear_Screen();
    _delay_ms(500);
	char number [10]={ '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' ,'8' , '9' } ;
	while(1)
	{
		LCD_Goto_XY(1,0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Goto_XY>
		LCD_Send_A_Character( number [i] ) ;
 2ac:	e1 e0       	ldi	r30, 0x01	; 1
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	e0 0f       	add	r30, r16
 2b6:	f1 1f       	adc	r31, r17
 2b8:	80 81       	ld	r24, Z
 2ba:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Send_A_Character>
		i++ ;
 2be:	0f 5f       	subi	r16, 0xFF	; 255
 2c0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(i==10)
 2c2:	0a 30       	cpi	r16, 0x0A	; 10
 2c4:	11 05       	cpc	r17, r1
 2c6:	21 f4       	brne	.+8      	; 0x2d0 <main+0x74>
		{
			i=0;
			LCD_Clear_Screen();
 2c8:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Clear_Screen>
		LCD_Goto_XY(1,0);
		LCD_Send_A_Character( number [i] ) ;
		i++ ;
		if(i==10)
		{
			i=0;
 2cc:	00 e0       	ldi	r16, 0x00	; 0
 2ce:	10 e0       	ldi	r17, 0x00	; 0
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	8e e9       	ldi	r24, 0x9E	; 158
 2d4:	94 e2       	ldi	r25, 0x24	; 36
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x7a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x84>
 2e0:	00 00       	nop
 2e2:	e0 cf       	rjmp	.-64     	; 0x2a4 <main+0x48>

000002e4 <MCAL_UART_Init>:
	{
		while (!(UART1->UCSRA_.Bits.Bit7));
		(*pRxBuffer) = UART1->UDR_;
		pRxBuffer++;
	}
	*pRxBuffer ='\0';
 2e4:	fc 01       	movw	r30, r24
 2e6:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ea:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ee:	82 81       	ldd	r24, Z+2	; 0x02
 2f0:	8c 93       	st	X, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <MCAL_UART_Init+0x16>
 2f8:	04 c1       	rjmp	.+520    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 2fa:	81 81       	ldd	r24, Z+1	; 0x01
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	79 f0       	breq	.+30     	; 0x31e <MCAL_UART_Init+0x3a>
 300:	18 f0       	brcs	.+6      	; 0x308 <MCAL_UART_Init+0x24>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	b9 f0       	breq	.+46     	; 0x334 <MCAL_UART_Init+0x50>
 306:	2a c0       	rjmp	.+84     	; 0x35c <MCAL_UART_Init+0x78>
 308:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 30c:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 310:	11 96       	adiw	r26, 0x01	; 1
 312:	8c 91       	ld	r24, X
 314:	11 97       	sbiw	r26, 0x01	; 1
 316:	88 60       	ori	r24, 0x08	; 8
 318:	11 96       	adiw	r26, 0x01	; 1
 31a:	8c 93       	st	X, r24
 31c:	1f c0       	rjmp	.+62     	; 0x35c <MCAL_UART_Init+0x78>
 31e:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 322:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 326:	11 96       	adiw	r26, 0x01	; 1
 328:	8c 91       	ld	r24, X
 32a:	11 97       	sbiw	r26, 0x01	; 1
 32c:	80 61       	ori	r24, 0x10	; 16
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	8c 93       	st	X, r24
 332:	14 c0       	rjmp	.+40     	; 0x35c <MCAL_UART_Init+0x78>
 334:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 338:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 33c:	11 96       	adiw	r26, 0x01	; 1
 33e:	8c 91       	ld	r24, X
 340:	11 97       	sbiw	r26, 0x01	; 1
 342:	88 60       	ori	r24, 0x08	; 8
 344:	11 96       	adiw	r26, 0x01	; 1
 346:	8c 93       	st	X, r24
 348:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34c:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 350:	11 96       	adiw	r26, 0x01	; 1
 352:	8c 91       	ld	r24, X
 354:	11 97       	sbiw	r26, 0x01	; 1
 356:	80 61       	ori	r24, 0x10	; 16
 358:	11 96       	adiw	r26, 0x01	; 1
 35a:	8c 93       	st	X, r24
 35c:	86 81       	ldd	r24, Z+6	; 0x06
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	c9 f0       	breq	.+50     	; 0x394 <MCAL_UART_Init+0xb0>
 362:	28 f4       	brcc	.+10     	; 0x36e <MCAL_UART_Init+0x8a>
 364:	88 23       	and	r24, r24
 366:	41 f0       	breq	.+16     	; 0x378 <MCAL_UART_Init+0x94>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	69 f0       	breq	.+26     	; 0x386 <MCAL_UART_Init+0xa2>
 36c:	31 c0       	rjmp	.+98     	; 0x3d0 <MCAL_UART_Init+0xec>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	c1 f0       	breq	.+48     	; 0x3a2 <MCAL_UART_Init+0xbe>
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	e9 f0       	breq	.+58     	; 0x3b0 <MCAL_UART_Init+0xcc>
 376:	2c c0       	rjmp	.+88     	; 0x3d0 <MCAL_UART_Init+0xec>
 378:	80 b5       	in	r24, 0x20	; 32
 37a:	8d 7f       	andi	r24, 0xFD	; 253
 37c:	80 bd       	out	0x20, r24	; 32
 37e:	80 b5       	in	r24, 0x20	; 32
 380:	8b 7f       	andi	r24, 0xFB	; 251
 382:	80 bd       	out	0x20, r24	; 32
 384:	25 c0       	rjmp	.+74     	; 0x3d0 <MCAL_UART_Init+0xec>
 386:	80 b5       	in	r24, 0x20	; 32
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 bd       	out	0x20, r24	; 32
 38c:	80 b5       	in	r24, 0x20	; 32
 38e:	8b 7f       	andi	r24, 0xFB	; 251
 390:	80 bd       	out	0x20, r24	; 32
 392:	1e c0       	rjmp	.+60     	; 0x3d0 <MCAL_UART_Init+0xec>
 394:	80 b5       	in	r24, 0x20	; 32
 396:	8d 7f       	andi	r24, 0xFD	; 253
 398:	80 bd       	out	0x20, r24	; 32
 39a:	80 b5       	in	r24, 0x20	; 32
 39c:	84 60       	ori	r24, 0x04	; 4
 39e:	80 bd       	out	0x20, r24	; 32
 3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <MCAL_UART_Init+0xec>
 3a2:	80 b5       	in	r24, 0x20	; 32
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 bd       	out	0x20, r24	; 32
 3a8:	80 b5       	in	r24, 0x20	; 32
 3aa:	84 60       	ori	r24, 0x04	; 4
 3ac:	80 bd       	out	0x20, r24	; 32
 3ae:	10 c0       	rjmp	.+32     	; 0x3d0 <MCAL_UART_Init+0xec>
 3b0:	80 b5       	in	r24, 0x20	; 32
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	80 bd       	out	0x20, r24	; 32
 3b6:	80 b5       	in	r24, 0x20	; 32
 3b8:	84 60       	ori	r24, 0x04	; 4
 3ba:	80 bd       	out	0x20, r24	; 32
 3bc:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c0:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c4:	11 96       	adiw	r26, 0x01	; 1
 3c6:	8c 91       	ld	r24, X
 3c8:	11 97       	sbiw	r26, 0x01	; 1
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	11 96       	adiw	r26, 0x01	; 1
 3ce:	8c 93       	st	X, r24
 3d0:	80 85       	ldd	r24, Z+8	; 0x08
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	19 f0       	breq	.+6      	; 0x3dc <MCAL_UART_Init+0xf8>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <MCAL_UART_Init+0xfe>
 3da:	06 c0       	rjmp	.+12     	; 0x3e8 <MCAL_UART_Init+0x104>
 3dc:	80 b5       	in	r24, 0x20	; 32
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	80 bd       	out	0x20, r24	; 32
 3e2:	80 b5       	in	r24, 0x20	; 32
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	80 bd       	out	0x20, r24	; 32
 3e8:	87 81       	ldd	r24, Z+7	; 0x07
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	59 f0       	breq	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3ee:	18 f0       	brcs	.+6      	; 0x3f6 <MCAL_UART_Init+0x112>
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	79 f0       	breq	.+30     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3f6:	80 b5       	in	r24, 0x20	; 32
 3f8:	8f 7e       	andi	r24, 0xEF	; 239
 3fa:	80 bd       	out	0x20, r24	; 32
 3fc:	80 b5       	in	r24, 0x20	; 32
 3fe:	8f 7d       	andi	r24, 0xDF	; 223
 400:	80 bd       	out	0x20, r24	; 32
 402:	0d c0       	rjmp	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 404:	80 b5       	in	r24, 0x20	; 32
 406:	8f 7e       	andi	r24, 0xEF	; 239
 408:	80 bd       	out	0x20, r24	; 32
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	80 62       	ori	r24, 0x20	; 32
 40e:	80 bd       	out	0x20, r24	; 32
 410:	06 c0       	rjmp	.+12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 412:	80 b5       	in	r24, 0x20	; 32
 414:	80 61       	ori	r24, 0x10	; 16
 416:	80 bd       	out	0x20, r24	; 32
 418:	80 b5       	in	r24, 0x20	; 32
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	80 bd       	out	0x20, r24	; 32
 41e:	81 85       	ldd	r24, Z+9	; 0x09
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	b1 f0       	breq	.+44     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 424:	30 f0       	brcs	.+12     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	89 f1       	breq	.+98     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42e:	4c c0       	rjmp	.+152    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 430:	08 95       	ret
 432:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 436:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 43a:	81 81       	ldd	r24, Z+1	; 0x01
 43c:	8f 7b       	andi	r24, 0xBF	; 191
 43e:	81 83       	std	Z+1, r24	; 0x01
 440:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 444:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 448:	81 81       	ldd	r24, Z+1	; 0x01
 44a:	8f 7b       	andi	r24, 0xBF	; 191
 44c:	81 83       	std	Z+1, r24	; 0x01
 44e:	08 95       	ret
 450:	8f b7       	in	r24, 0x3f	; 63
 452:	80 68       	ori	r24, 0x80	; 128
 454:	8f bf       	out	0x3f, r24	; 63
 456:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 45a:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	8c 91       	ld	r24, X
 462:	11 97       	sbiw	r26, 0x01	; 1
 464:	80 64       	ori	r24, 0x40	; 64
 466:	11 96       	adiw	r26, 0x01	; 1
 468:	8c 93       	st	X, r24
 46a:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46e:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 472:	11 96       	adiw	r26, 0x01	; 1
 474:	8c 91       	ld	r24, X
 476:	11 97       	sbiw	r26, 0x01	; 1
 478:	8f 77       	andi	r24, 0x7F	; 127
 47a:	11 96       	adiw	r26, 0x01	; 1
 47c:	8c 93       	st	X, r24
 47e:	82 85       	ldd	r24, Z+10	; 0x0a
 480:	93 85       	ldd	r25, Z+11	; 0x0b
 482:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <GP_CallBack+0x1>
 486:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <GP_CallBack>
 48a:	08 95       	ret
 48c:	8f b7       	in	r24, 0x3f	; 63
 48e:	80 68       	ori	r24, 0x80	; 128
 490:	8f bf       	out	0x3f, r24	; 63
 492:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 496:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 49a:	11 96       	adiw	r26, 0x01	; 1
 49c:	8c 91       	ld	r24, X
 49e:	11 97       	sbiw	r26, 0x01	; 1
 4a0:	8f 7b       	andi	r24, 0xBF	; 191
 4a2:	11 96       	adiw	r26, 0x01	; 1
 4a4:	8c 93       	st	X, r24
 4a6:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4aa:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ae:	11 96       	adiw	r26, 0x01	; 1
 4b0:	8c 91       	ld	r24, X
 4b2:	11 97       	sbiw	r26, 0x01	; 1
 4b4:	80 68       	ori	r24, 0x80	; 128
 4b6:	11 96       	adiw	r26, 0x01	; 1
 4b8:	8c 93       	st	X, r24
 4ba:	82 85       	ldd	r24, Z+10	; 0x0a
 4bc:	93 85       	ldd	r25, Z+11	; 0x0b
 4be:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <GP_CallBack+0x1>
 4c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <GP_CallBack>
 4c6:	08 95       	ret
 4c8:	8f b7       	in	r24, 0x3f	; 63
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	8f bf       	out	0x3f, r24	; 63
 4ce:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4d2:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4d6:	11 96       	adiw	r26, 0x01	; 1
 4d8:	8c 91       	ld	r24, X
 4da:	11 97       	sbiw	r26, 0x01	; 1
 4dc:	8f 7b       	andi	r24, 0xBF	; 191
 4de:	11 96       	adiw	r26, 0x01	; 1
 4e0:	8c 93       	st	X, r24
 4e2:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e6:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ea:	11 96       	adiw	r26, 0x01	; 1
 4ec:	8c 91       	ld	r24, X
 4ee:	11 97       	sbiw	r26, 0x01	; 1
 4f0:	80 68       	ori	r24, 0x80	; 128
 4f2:	11 96       	adiw	r26, 0x01	; 1
 4f4:	8c 93       	st	X, r24
 4f6:	82 85       	ldd	r24, Z+10	; 0x0a
 4f8:	93 85       	ldd	r25, Z+11	; 0x0b
 4fa:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <GP_CallBack+0x1>
 4fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <GP_CallBack>
 502:	08 95       	ret

00000504 <MCAL_UART_receiveData>:
 504:	88 23       	and	r24, r24
 506:	39 f0       	breq	.+14     	; 0x516 <MCAL_UART_receiveData+0x12>
 508:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 50c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 510:	82 81       	ldd	r24, Z+2	; 0x02
 512:	88 23       	and	r24, r24
 514:	cc f7       	brge	.-14     	; 0x508 <MCAL_UART_receiveData+0x4>
 516:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 51a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 51e:	81 81       	ldd	r24, Z+1	; 0x01
 520:	82 ff       	sbrs	r24, 2
 522:	04 c0       	rjmp	.+8      	; 0x52c <MCAL_UART_receiveData+0x28>
 524:	81 81       	ldd	r24, Z+1	; 0x01
 526:	83 81       	ldd	r24, Z+3	; 0x03
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	08 95       	ret
 52c:	83 81       	ldd	r24, Z+3	; 0x03
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret

00000532 <__vector_13>:
}
ISR(USART_RXC_vect)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	GP_CallBack();
 554:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GP_CallBack>
 558:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GP_CallBack+0x1>
 55c:	09 95       	icall
}
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <__vector_15>:

ISR(USART_TXC_vect)
{
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
	GP_CallBack();
 5a2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <GP_CallBack>
 5a6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <GP_CallBack+0x1>
 5aa:	09 95       	icall
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
