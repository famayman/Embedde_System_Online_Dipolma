
Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b2  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d84  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dc  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000817  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_12>
  34:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_13>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_15>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	c0 01       	movw	r24, r0
  56:	d6 01       	movw	r26, r12
  58:	ec 01       	movw	r28, r24
  5a:	02 02       	muls	r16, r18
  5c:	18 02       	muls	r17, r24
  5e:	2e 02       	muls	r18, r30
  60:	44 02       	muls	r20, r20

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ec e8       	ldi	r30, 0x8C	; 140
  76:	f6 e0       	ldi	r31, 0x06	; 6
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 36       	cpi	r26, 0x62	; 98
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e6       	ldi	r26, 0x62	; 98
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a4 36       	cpi	r26, 0x64	; 100
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  98:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <SPI_Config>:
#include "avr/delay.h"
#define F_CPU	10000000UL
void SPI_Config(void)
{
	S_SPI_Config_t *SPI_Con;
	SPI_Con->SPI_Mode =SPI_Mode_Slave;
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	SPI_Con->SPI_Interrupt=SPI_Interrupt_Disable;
  aa:	21 83       	std	Z+1, r18	; 0x01
	MCAL_SPI_Init(SPI_Con);
  ac:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCAL_SPI_Init>
  b0:	08 95       	ret

000000b2 <main>:
}
int main(void)
{
	DDRA=0xFF; //for simplicity
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	SPI_Config();
  b6:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Config>
	int data=0;
	while(1)
	{
		for(data=0 ; data<=255 ; data++)
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	0e c0       	rjmp	.+28     	; 0xdc <main+0x2a>
		{
			PORTA= MCAL_SPI_receiveData(data);
  c0:	8c 2f       	mov	r24, r28
  c2:	0e 94 bf 02 	call	0x57e	; 0x57e <MCAL_SPI_receiveData>
  c6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f e3       	ldi	r18, 0x3F	; 63
  ca:	8d e0       	ldi	r24, 0x0D	; 13
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x1c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x26>
  d8:	00 00       	nop
	DDRA=0xFF; //for simplicity
	SPI_Config();
	int data=0;
	while(1)
	{
		for(data=0 ; data<=255 ; data++)
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	cf 3f       	cpi	r28, 0xFF	; 255
  de:	d1 05       	cpc	r29, r1
  e0:	79 f3       	breq	.-34     	; 0xc0 <main+0xe>
  e2:	74 f3       	brlt	.-36     	; 0xc0 <main+0xe>
  e4:	ea cf       	rjmp	.-44     	; 0xba <main+0x8>

000000e6 <MCAL_GPIO_Init>:
* @param [in] 	-PinConfig: pointer to GPIO Config
* @retval 		-none
* Note			-none
*/
void MCAL_GPIO_Init (S_GPIO_t * GPIOx , S_GPIO_Config_t * P_Config)
{
  e6:	fc 01       	movw	r30, r24
	if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN0)
  e8:	db 01       	movw	r26, r22
  ea:	8c 91       	ld	r24, X
  ec:	81 11       	cpse	r24, r1
  ee:	1b c0       	rjmp	.+54     	; 0x126 <MCAL_GPIO_Init+0x40>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	8c 91       	ld	r24, X
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	39 f4       	brne	.+14     	; 0x106 <MCAL_GPIO_Init+0x20>
		{
			GPIOx->DDR.Bits.Bit0     = PIN_Set;
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit0   = PIN_Reset;
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	82 83       	std	Z+2, r24	; 0x02
 104:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	39 f4       	brne	.+14     	; 0x118 <MCAL_GPIO_Init+0x32>
		{
			GPIOx->DDR.Bits.Bit0   = PIN_Reset;
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit0 = PIN_Reset;
 110:	82 81       	ldd	r24, Z+2	; 0x02
 112:	8e 7f       	andi	r24, 0xFE	; 254
 114:	82 83       	std	Z+2, r24	; 0x02
 116:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit0   = PIN_Set;
 118:	81 81       	ldd	r24, Z+1	; 0x01
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit0 = PIN_Reset;
 11e:	82 81       	ldd	r24, Z+2	; 0x02
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	82 83       	std	Z+2, r24	; 0x02
 124:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN1)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	e1 f4       	brne	.+56     	; 0x162 <MCAL_GPIO_Init+0x7c>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 12a:	db 01       	movw	r26, r22
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	8c 91       	ld	r24, X
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	39 f4       	brne	.+14     	; 0x142 <MCAL_GPIO_Init+0x5c>
		{
			GPIOx->DDR.Bits.Bit1   = PIN_Set;
 134:	81 81       	ldd	r24, Z+1	; 0x01
 136:	82 60       	ori	r24, 0x02	; 2
 138:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit1 = PIN_Reset;
 13a:	82 81       	ldd	r24, Z+2	; 0x02
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	82 83       	std	Z+2, r24	; 0x02
 140:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	39 f4       	brne	.+14     	; 0x154 <MCAL_GPIO_Init+0x6e>
		{
			GPIOx->DDR.Bits.Bit1  = PIN_Reset;
 146:	81 81       	ldd	r24, Z+1	; 0x01
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit1 = PIN_Reset;
 14c:	82 81       	ldd	r24, Z+2	; 0x02
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	82 83       	std	Z+2, r24	; 0x02
 152:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit1   = PIN_Set;
 154:	81 81       	ldd	r24, Z+1	; 0x01
 156:	82 60       	ori	r24, 0x02	; 2
 158:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit1 = PIN_Reset;
 15a:	82 81       	ldd	r24, Z+2	; 0x02
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	82 83       	std	Z+2, r24	; 0x02
 160:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN2)
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	e1 f4       	brne	.+56     	; 0x19e <MCAL_GPIO_Init+0xb8>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 166:	db 01       	movw	r26, r22
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	8c 91       	ld	r24, X
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	39 f4       	brne	.+14     	; 0x17e <MCAL_GPIO_Init+0x98>
		{
			GPIOx->DDR.Bits.Bit2   = PIN_Set;
 170:	81 81       	ldd	r24, Z+1	; 0x01
 172:	84 60       	ori	r24, 0x04	; 4
 174:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit2 = PIN_Reset;
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	82 83       	std	Z+2, r24	; 0x02
 17c:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	39 f4       	brne	.+14     	; 0x190 <MCAL_GPIO_Init+0xaa>
		{
			GPIOx->DDR.Bits.Bit3   = PIN_Reset;
 182:	81 81       	ldd	r24, Z+1	; 0x01
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit3 = PIN_Reset;
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	87 7f       	andi	r24, 0xF7	; 247
 18c:	82 83       	std	Z+2, r24	; 0x02
 18e:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit3   = PIN_Set;
 190:	81 81       	ldd	r24, Z+1	; 0x01
 192:	88 60       	ori	r24, 0x08	; 8
 194:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit3 = PIN_Reset;
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	82 83       	std	Z+2, r24	; 0x02
 19c:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN3)
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	e1 f4       	brne	.+56     	; 0x1da <MCAL_GPIO_Init+0xf4>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 1a2:	db 01       	movw	r26, r22
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	8c 91       	ld	r24, X
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	39 f4       	brne	.+14     	; 0x1ba <MCAL_GPIO_Init+0xd4>
		{
			GPIOx->DDR.Bits.Bit3  = PIN_Set;
 1ac:	81 81       	ldd	r24, Z+1	; 0x01
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit3 = PIN_Reset;
 1b2:	82 81       	ldd	r24, Z+2	; 0x02
 1b4:	87 7f       	andi	r24, 0xF7	; 247
 1b6:	82 83       	std	Z+2, r24	; 0x02
 1b8:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	39 f4       	brne	.+14     	; 0x1cc <MCAL_GPIO_Init+0xe6>
		{
			GPIOx->DDR.Bits.Bit3   = PIN_Reset;
 1be:	81 81       	ldd	r24, Z+1	; 0x01
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit3 = PIN_Reset;
 1c4:	82 81       	ldd	r24, Z+2	; 0x02
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	82 83       	std	Z+2, r24	; 0x02
 1ca:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit3 = PIN_Set;
 1cc:	81 81       	ldd	r24, Z+1	; 0x01
 1ce:	88 60       	ori	r24, 0x08	; 8
 1d0:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit3 = PIN_Reset;
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	82 83       	std	Z+2, r24	; 0x02
 1d8:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN4)
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	e1 f4       	brne	.+56     	; 0x216 <MCAL_GPIO_Init+0x130>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 1de:	db 01       	movw	r26, r22
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	8c 91       	ld	r24, X
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <MCAL_GPIO_Init+0x110>
		{
			GPIOx->DDR.Bits.Bit4   = PIN_Set;
 1e8:	81 81       	ldd	r24, Z+1	; 0x01
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit4 = PIN_Reset;
 1ee:	82 81       	ldd	r24, Z+2	; 0x02
 1f0:	8f 7e       	andi	r24, 0xEF	; 239
 1f2:	82 83       	std	Z+2, r24	; 0x02
 1f4:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	39 f4       	brne	.+14     	; 0x208 <MCAL_GPIO_Init+0x122>
		{
			GPIOx->DDR.Bits.Bit4   = PIN_Reset;
 1fa:	81 81       	ldd	r24, Z+1	; 0x01
 1fc:	8f 7e       	andi	r24, 0xEF	; 239
 1fe:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit4 = PIN_Reset;
 200:	82 81       	ldd	r24, Z+2	; 0x02
 202:	8f 7e       	andi	r24, 0xEF	; 239
 204:	82 83       	std	Z+2, r24	; 0x02
 206:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit4  = PIN_Set;
 208:	81 81       	ldd	r24, Z+1	; 0x01
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit4 = PIN_Reset;
 20e:	82 81       	ldd	r24, Z+2	; 0x02
 210:	8f 7e       	andi	r24, 0xEF	; 239
 212:	82 83       	std	Z+2, r24	; 0x02
 214:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN5)
 216:	85 30       	cpi	r24, 0x05	; 5
 218:	e1 f4       	brne	.+56     	; 0x252 <MCAL_GPIO_Init+0x16c>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 21a:	db 01       	movw	r26, r22
 21c:	11 96       	adiw	r26, 0x01	; 1
 21e:	8c 91       	ld	r24, X
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	39 f4       	brne	.+14     	; 0x232 <MCAL_GPIO_Init+0x14c>
		{
			GPIOx->DDR.Bits.Bit5   = PIN_Set;
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	80 62       	ori	r24, 0x20	; 32
 228:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit5 = PIN_Reset;
 22a:	82 81       	ldd	r24, Z+2	; 0x02
 22c:	8f 7d       	andi	r24, 0xDF	; 223
 22e:	82 83       	std	Z+2, r24	; 0x02
 230:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	39 f4       	brne	.+14     	; 0x244 <MCAL_GPIO_Init+0x15e>
		{
			GPIOx->DDR.Bits.Bit5 = PIN_Reset;
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit5 = PIN_Reset;
 23c:	82 81       	ldd	r24, Z+2	; 0x02
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	82 83       	std	Z+2, r24	; 0x02
 242:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit5  = PIN_Set;
 244:	81 81       	ldd	r24, Z+1	; 0x01
 246:	80 62       	ori	r24, 0x20	; 32
 248:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit5 = PIN_Reset;
 24a:	82 81       	ldd	r24, Z+2	; 0x02
 24c:	8f 7d       	andi	r24, 0xDF	; 223
 24e:	82 83       	std	Z+2, r24	; 0x02
 250:	08 95       	ret
		}
		
	}
	else if(P_Config->GPIO_Pin_Number == GPIO_PINS_PIN6)
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	e1 f4       	brne	.+56     	; 0x28e <MCAL_GPIO_Init+0x1a8>
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 256:	db 01       	movw	r26, r22
 258:	11 96       	adiw	r26, 0x01	; 1
 25a:	8c 91       	ld	r24, X
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	39 f4       	brne	.+14     	; 0x26e <MCAL_GPIO_Init+0x188>
		{
			GPIOx->DDR.Bits.Bit6   = PIN_Set;
 260:	81 81       	ldd	r24, Z+1	; 0x01
 262:	80 64       	ori	r24, 0x40	; 64
 264:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit6 = PIN_Reset;
 266:	82 81       	ldd	r24, Z+2	; 0x02
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	82 83       	std	Z+2, r24	; 0x02
 26c:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	39 f4       	brne	.+14     	; 0x280 <MCAL_GPIO_Init+0x19a>
		{
			GPIOx->DDR.Bits.Bit6  = PIN_Reset;
 272:	81 81       	ldd	r24, Z+1	; 0x01
 274:	8f 7b       	andi	r24, 0xBF	; 191
 276:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit6 = PIN_Reset;
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	8f 7b       	andi	r24, 0xBF	; 191
 27c:	82 83       	std	Z+2, r24	; 0x02
 27e:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit6  = PIN_Set;
 280:	81 81       	ldd	r24, Z+1	; 0x01
 282:	80 64       	ori	r24, 0x40	; 64
 284:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit6 = PIN_Reset;
 286:	82 81       	ldd	r24, Z+2	; 0x02
 288:	8f 7b       	andi	r24, 0xBF	; 191
 28a:	82 83       	std	Z+2, r24	; 0x02
 28c:	08 95       	ret
		}
		
	}
	else
	{
		if(P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_Output)
 28e:	db 01       	movw	r26, r22
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	8c 91       	ld	r24, X
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	39 f4       	brne	.+14     	; 0x2a6 <MCAL_GPIO_Init+0x1c0>
		{
			GPIOx->DDR.Bits.Bit7  = PIN_Set;
 298:	81 81       	ldd	r24, Z+1	; 0x01
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit7 = PIN_Reset;
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	8f 77       	andi	r24, 0x7F	; 127
 2a2:	82 83       	std	Z+2, r24	; 0x02
 2a4:	08 95       	ret
		}
		else if (P_Config->GPIO_Pin_Mode == GPIO_Pin_Mode_INput_No_PULL_UP)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	39 f4       	brne	.+14     	; 0x2b8 <MCAL_GPIO_Init+0x1d2>
		{
			GPIOx->DDR.Bits.Bit7  = PIN_Reset;
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	8f 77       	andi	r24, 0x7F	; 127
 2ae:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit7 = PIN_Reset;
 2b0:	82 81       	ldd	r24, Z+2	; 0x02
 2b2:	8f 77       	andi	r24, 0x7F	; 127
 2b4:	82 83       	std	Z+2, r24	; 0x02
 2b6:	08 95       	ret
		}
		else
		{
			GPIOx->DDR.Bits.Bit7  = PIN_Set;
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	81 83       	std	Z+1, r24	; 0x01
			GPIOx->PORT.Bits.Bit7 = PIN_Reset;
 2be:	82 81       	ldd	r24, Z+2	; 0x02
 2c0:	8f 77       	andi	r24, 0x7F	; 127
 2c2:	82 83       	std	Z+2, r24	; 0x02
 2c4:	08 95       	ret

000002c6 <MCAL_SPI_Init>:
uint8_t MCAL_SPI_SendData(uint8_t TxBuffer)
{	
	SPI1->SPDR_ = TxBuffer;
	while(!(SPI1->SPSR_.Bits.Bit7));
	return SPI1->SPDR_;
}
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	8c 01       	movw	r16, r24
 2d2:	dc 01       	movw	r26, r24
 2d4:	8c 91       	ld	r24, X
 2d6:	88 23       	and	r24, r24
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <MCAL_SPI_Init+0x1c>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <MCAL_SPI_Init+0x1a>
 2de:	ea c0       	rjmp	.+468    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 2e0:	1c c1       	rjmp	.+568    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 2e2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2e6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2ea:	80 81       	ld	r24, Z
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	80 83       	st	Z, r24
 2f0:	68 94       	set
 2f2:	ff 24       	eor	r15, r15
 2f4:	f1 f8       	bld	r15, 1
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	d0 e0       	ldi	r29, 0x00	; 0
 2fa:	f9 82       	std	Y+1, r15	; 0x01
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	88 83       	st	Y, r24
 300:	be 01       	movw	r22, r28
 302:	86 e3       	ldi	r24, 0x36	; 54
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 30a:	f9 82       	std	Y+1, r15	; 0x01
 30c:	87 e0       	ldi	r24, 0x07	; 7
 30e:	88 83       	st	Y, r24
 310:	be 01       	movw	r22, r28
 312:	86 e3       	ldi	r24, 0x36	; 54
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 31a:	f9 82       	std	Y+1, r15	; 0x01
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	88 83       	st	Y, r24
 320:	be 01       	movw	r22, r28
 322:	86 e3       	ldi	r24, 0x36	; 54
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 32a:	f9 82       	std	Y+1, r15	; 0x01
 32c:	86 e0       	ldi	r24, 0x06	; 6
 32e:	88 83       	st	Y, r24
 330:	be 01       	movw	r22, r28
 332:	86 e3       	ldi	r24, 0x36	; 54
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 33a:	f8 01       	movw	r30, r16
 33c:	82 81       	ldd	r24, Z+2	; 0x02
 33e:	88 23       	and	r24, r24
 340:	51 f0       	breq	.+20     	; 0x356 <MCAL_SPI_Init+0x90>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	79 f4       	brne	.+30     	; 0x364 <MCAL_SPI_Init+0x9e>
 346:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 34a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 34e:	80 81       	ld	r24, Z
 350:	80 62       	ori	r24, 0x20	; 32
 352:	80 83       	st	Z, r24
 354:	07 c0       	rjmp	.+14     	; 0x364 <MCAL_SPI_Init+0x9e>
 356:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 35a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 35e:	80 81       	ld	r24, Z
 360:	8f 7d       	andi	r24, 0xDF	; 223
 362:	80 83       	st	Z, r24
 364:	d8 01       	movw	r26, r16
 366:	13 96       	adiw	r26, 0x03	; 3
 368:	ec 91       	ld	r30, X
 36a:	8e 2f       	mov	r24, r30
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	87 30       	cpi	r24, 0x07	; 7
 370:	91 05       	cpc	r25, r1
 372:	08 f0       	brcs	.+2      	; 0x376 <MCAL_SPI_Init+0xb0>
 374:	d2 c0       	rjmp	.+420    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 376:	fc 01       	movw	r30, r24
 378:	e6 5d       	subi	r30, 0xD6	; 214
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	0c 94 3e 03 	jmp	0x67c	; 0x67c <__tablejump2__>
 380:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 384:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 388:	81 81       	ldd	r24, Z+1	; 0x01
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 392:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 396:	80 81       	ld	r24, Z
 398:	8e 7f       	andi	r24, 0xFE	; 254
 39a:	80 83       	st	Z, r24
 39c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3a4:	80 81       	ld	r24, Z
 3a6:	8d 7f       	andi	r24, 0xFD	; 253
 3a8:	80 83       	st	Z, r24
 3aa:	b7 c0       	rjmp	.+366    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 3ac:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3b4:	81 81       	ldd	r24, Z+1	; 0x01
 3b6:	8e 7f       	andi	r24, 0xFE	; 254
 3b8:	81 83       	std	Z+1, r24	; 0x01
 3ba:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3be:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	80 81       	ld	r24, Z
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	80 83       	st	Z, r24
 3c8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3cc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3d0:	80 81       	ld	r24, Z
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	80 83       	st	Z, r24
 3d6:	a1 c0       	rjmp	.+322    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 3d8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3dc:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3e0:	81 81       	ldd	r24, Z+1	; 0x01
 3e2:	81 60       	ori	r24, 0x01	; 1
 3e4:	81 83       	std	Z+1, r24	; 0x01
 3e6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3ea:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3ee:	80 81       	ld	r24, Z
 3f0:	8e 7f       	andi	r24, 0xFE	; 254
 3f2:	80 83       	st	Z, r24
 3f4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3fc:	80 81       	ld	r24, Z
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	80 83       	st	Z, r24
 402:	8b c0       	rjmp	.+278    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 404:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 408:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 40c:	81 81       	ldd	r24, Z+1	; 0x01
 40e:	8e 7f       	andi	r24, 0xFE	; 254
 410:	81 83       	std	Z+1, r24	; 0x01
 412:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 416:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41a:	80 81       	ld	r24, Z
 41c:	81 60       	ori	r24, 0x01	; 1
 41e:	80 83       	st	Z, r24
 420:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 424:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 428:	80 81       	ld	r24, Z
 42a:	8d 7f       	andi	r24, 0xFD	; 253
 42c:	80 83       	st	Z, r24
 42e:	75 c0       	rjmp	.+234    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 430:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 434:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 438:	81 81       	ldd	r24, Z+1	; 0x01
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	81 83       	std	Z+1, r24	; 0x01
 43e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 442:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
 44c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 450:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 454:	80 81       	ld	r24, Z
 456:	8d 7f       	andi	r24, 0xFD	; 253
 458:	80 83       	st	Z, r24
 45a:	5f c0       	rjmp	.+190    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 45c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 460:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 464:	81 81       	ldd	r24, Z+1	; 0x01
 466:	81 60       	ori	r24, 0x01	; 1
 468:	81 83       	std	Z+1, r24	; 0x01
 46a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 46e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 472:	80 81       	ld	r24, Z
 474:	8e 7f       	andi	r24, 0xFE	; 254
 476:	80 83       	st	Z, r24
 478:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 47c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
 486:	49 c0       	rjmp	.+146    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 488:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 48c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 490:	81 81       	ldd	r24, Z+1	; 0x01
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	81 83       	std	Z+1, r24	; 0x01
 496:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 49a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 49e:	80 81       	ld	r24, Z
 4a0:	81 60       	ori	r24, 0x01	; 1
 4a2:	80 83       	st	Z, r24
 4a4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ac:	80 81       	ld	r24, Z
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	80 83       	st	Z, r24
 4b2:	33 c0       	rjmp	.+102    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 4b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4bc:	80 81       	ld	r24, Z
 4be:	80 64       	ori	r24, 0x40	; 64
 4c0:	80 83       	st	Z, r24
 4c2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4c6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ca:	80 81       	ld	r24, Z
 4cc:	8f 7e       	andi	r24, 0xEF	; 239
 4ce:	80 83       	st	Z, r24
 4d0:	ff 24       	eor	r15, r15
 4d2:	f3 94       	inc	r15
 4d4:	c0 e0       	ldi	r28, 0x00	; 0
 4d6:	d0 e0       	ldi	r29, 0x00	; 0
 4d8:	f9 82       	std	Y+1, r15	; 0x01
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	88 83       	st	Y, r24
 4de:	be 01       	movw	r22, r28
 4e0:	86 e3       	ldi	r24, 0x36	; 54
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	89 83       	std	Y+1, r24	; 0x01
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	88 83       	st	Y, r24
 4f0:	be 01       	movw	r22, r28
 4f2:	86 e3       	ldi	r24, 0x36	; 54
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 4fa:	f9 82       	std	Y+1, r15	; 0x01
 4fc:	85 e0       	ldi	r24, 0x05	; 5
 4fe:	88 83       	st	Y, r24
 500:	be 01       	movw	r22, r28
 502:	86 e3       	ldi	r24, 0x36	; 54
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 50a:	f9 82       	std	Y+1, r15	; 0x01
 50c:	87 e0       	ldi	r24, 0x07	; 7
 50e:	88 83       	st	Y, r24
 510:	be 01       	movw	r22, r28
 512:	86 e3       	ldi	r24, 0x36	; 54
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 73 00 	call	0xe6	; 0xe6 <MCAL_GPIO_Init>
 51a:	f8 01       	movw	r30, r16
 51c:	81 81       	ldd	r24, Z+1	; 0x01
 51e:	88 23       	and	r24, r24
 520:	19 f0       	breq	.+6      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	a9 f0       	breq	.+42     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 526:	1e c0       	rjmp	.+60     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 528:	8f b7       	in	r24, 0x3f	; 63
 52a:	80 68       	ori	r24, 0x80	; 128
 52c:	8f bf       	out	0x3f, r24	; 63
 52e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 532:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 536:	80 81       	ld	r24, Z
 538:	80 68       	ori	r24, 0x80	; 128
 53a:	80 83       	st	Z, r24
 53c:	d8 01       	movw	r26, r16
 53e:	14 96       	adiw	r26, 0x04	; 4
 540:	8d 91       	ld	r24, X+
 542:	9c 91       	ld	r25, X
 544:	15 97       	sbiw	r26, 0x05	; 5
 546:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 54a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 54e:	0a c0       	rjmp	.+20     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 550:	8f b7       	in	r24, 0x3f	; 63
 552:	8f 77       	andi	r24, 0x7F	; 127
 554:	8f bf       	out	0x3f, r24	; 63
 556:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 55a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 55e:	80 81       	ld	r24, Z
 560:	8f 77       	andi	r24, 0x7F	; 127
 562:	80 83       	st	Z, r24
 564:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 568:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 56c:	80 81       	ld	r24, Z
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	80 83       	st	Z, r24
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	ff 90       	pop	r15
 57c:	08 95       	ret

0000057e <MCAL_SPI_receiveData>:
* Note
*/
uint8_t MCAL_SPI_receiveData(uint8_t Data)
{
	uint8_t RxBuffer;
	SPI1->SPDR_=Data;
 57e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 582:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 586:	82 83       	std	Z+2, r24	; 0x02
	while(!(SPI1->SPSR_.Bits.Bit7));
 588:	81 81       	ldd	r24, Z+1	; 0x01
 58a:	88 23       	and	r24, r24
 58c:	ec f7       	brge	.-6      	; 0x588 <MCAL_SPI_receiveData+0xa>
	RxBuffer = SPI1->SPDR_;	
 58e:	82 81       	ldd	r24, Z+2	; 0x02
	return RxBuffer;
}
 590:	08 95       	ret

00000592 <__vector_12>:

ISR(SPI_STC_vect)
{
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
	GP_CallBack();
 5b4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 5b8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 5bc:	09 95       	icall
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_13>:
		pRxBuffer++;
	}
	*pRxBuffer ='\0';
}
ISR(USART_RXC_vect)
{
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	GP_CallBack();
 602:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 606:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 60a:	09 95       	icall
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_15>:

ISR(USART_TXC_vect)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
	GP_CallBack();
 650:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 654:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 658:	09 95       	icall
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <__tablejump2__>:
 67c:	ee 0f       	add	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	05 90       	lpm	r0, Z+
 682:	f4 91       	lpm	r31, Z
 684:	e0 2d       	mov	r30, r0
 686:	09 94       	ijmp

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>
