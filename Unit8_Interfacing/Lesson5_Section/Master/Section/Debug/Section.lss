
Section.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000912  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000009b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fce  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ced  00000000  00000000  00002b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001132  00000000  00000000  0000384f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000795  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b24  00000000  00000000  000054a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_12>
  34:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_13>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__vector_15>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	72 02       	muls	r23, r18
  56:	78 02       	muls	r23, r24
  58:	7e 02       	muls	r23, r30
  5a:	84 02       	muls	r24, r20
  5c:	8a 02       	muls	r24, r26
  5e:	90 02       	muls	r25, r16
  60:	96 02       	muls	r25, r22
  62:	9c 02       	muls	r25, r28
  64:	02 03       	mulsu	r16, r18
  66:	18 03       	fmul	r17, r16
  68:	2e 03       	fmul	r18, r22
  6a:	44 03       	mulsu	r20, r20
  6c:	5a 03       	fmul	r21, r18
  6e:	70 03       	mulsu	r23, r16
  70:	86 03       	fmuls	r16, r22

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e2 e1       	ldi	r30, 0x12	; 18
  86:	f9 e0       	ldi	r31, 0x09	; 9
  88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
  8a:	05 90       	lpm	r0, Z+
  8c:	0d 92       	st	X+, r0
  8e:	aa 36       	cpi	r26, 0x6A	; 106
  90:	b1 07       	cpc	r27, r17
  92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	aa e6       	ldi	r26, 0x6A	; 106
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	ac 36       	cpi	r26, 0x6C	; 108
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 44 01 	call	0x288	; 0x288 <main>
  a8:	0c 94 87 04 	jmp	0x90e	; 0x90e <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <IS_LCD_Busy>:
	#ifdef Eight_Bit_MODE
	//Setting LCD PORT As Input
	DataDir_LCD_PORT = 0x00; 
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |=(0xff<< Data_Shift);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	80 6f       	ori	r24, 0xF0	; 240
  b4:	8a bb       	out	0x1a, r24	; 26
	#endif
	//Setting Control in Read Mode
	LCD_CTRL |= (1<<RW_Switch);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	88 bb       	out	0x18, r24	; 24
	//Rs Is off in Command Mode
	LCD_CTRL &= ~(1<<RS_Switch);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	88 bb       	out	0x18, r24	; 24
	//while(LCD_PORT >= 0x80);
	LCD_CTRL |= (1<<RS_Switch);
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	08 95       	ret

000000ca <LCD_Send_Pulse>:
}
void LCD_Send_Pulse()
{
	LCD_CTRL &=~(1<<EN_Switch);
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	83 ed       	ldi	r24, 0xD3	; 211
  d2:	90 e3       	ldi	r25, 0x30	; 48
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Send_Pulse+0xa>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Send_Pulse+0x10>
  da:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_Switch);	
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	08 95       	ret

000000e4 <LCD_Send_Command>:
	LCD_Send_Command(LCD_Entry_Mode);
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
}
void LCD_Send_Command (unsigned char CMD)
{
  e4:	cf 93       	push	r28
  e6:	c8 2f       	mov	r28, r24
	LCD_PORT = CMD;
	LCD_CTRL &= ~((1<<RS_Switch)|(1<<RW_Switch));
	LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	IS_LCD_Busy();
  e8:	0e 94 58 00 	call	0xb0	; 0xb0 <IS_LCD_Busy>
	LCD_PORT =  ((LCD_PORT & 0x0F) | (CMD & 0xF0));
  ec:	8b b3       	in	r24, 0x1b	; 27
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	9c 2f       	mov	r25, r28
  f2:	90 7f       	andi	r25, 0xF0	; 240
  f4:	89 2b       	or	r24, r25
  f6:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off 
	LCD_CTRL &=~((1<<RS_Switch)|(1<<RW_Switch));
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	89 7f       	andi	r24, 0xF9	; 249
  fc:	88 bb       	out	0x18, r24	; 24
	//Sending MSB Nibble
	LCD_Send_Pulse();
  fe:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_Pulse>
	LCD_PORT = ((LCD_PORT & 0x0F) | (CMD << Data_Shift)) ;
 102:	2b b3       	in	r18, 0x1b	; 27
 104:	30 e1       	ldi	r19, 0x10	; 16
 106:	c3 9f       	mul	r28, r19
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	92 2f       	mov	r25, r18
 10e:	9f 70       	andi	r25, 0x0F	; 15
 110:	89 2b       	or	r24, r25
 112:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off
	LCD_CTRL &=~((1<<RS_Switch)|(1<<RW_Switch));
 114:	88 b3       	in	r24, 0x18	; 24
 116:	89 7f       	andi	r24, 0xF9	; 249
 118:	88 bb       	out	0x18, r24	; 24
    //Sending LSB Nibble
	LCD_Send_Pulse();
 11a:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_Pulse>
	#endif
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <LCD_Send_A_Character>:
void LCD_Send_A_Character(unsigned char data)
{
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	 IS_LCD_Busy();
 126:	0e 94 58 00 	call	0xb0	; 0xb0 <IS_LCD_Busy>
	 //Sending Data  
	 LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	//Putting MSB Nibble on PORT
	LCD_PORT = (LCD_PORT & 0x0F)|(data & 0xF0);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	9c 2f       	mov	r25, r28
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	89 2b       	or	r24, r25
 134:	8b bb       	out	0x1b, r24	; 27
	//RS is on at read mode
	LCD_CTRL |= (1<<RS_Switch);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	88 bb       	out	0x18, r24	; 24
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	88 bb       	out	0x18, r24	; 24
	//Send MSB NIbble 
	LCD_Send_Pulse();
 142:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_Pulse>
	//Putting LSB Nibble on Port
	LCD_PORT =(LCD_PORT & 0x0F)|(data << Data_Shift);
 146:	2b b3       	in	r18, 0x1b	; 27
 148:	30 e1       	ldi	r19, 0x10	; 16
 14a:	c3 9f       	mul	r28, r19
 14c:	c0 01       	movw	r24, r0
 14e:	11 24       	eor	r1, r1
 150:	92 2f       	mov	r25, r18
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	89 2b       	or	r24, r25
 156:	8b bb       	out	0x1b, r24	; 27
	//RS is on at Data mode
	LCD_CTRL |= (1<<RS_Switch);
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	88 bb       	out	0x18, r24	; 24
	//RW is off at Data mode
	LCD_CTRL &= ~(1<<RW_Switch);
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	88 bb       	out	0x18, r24	; 24
	//Send LSB NIbble
	LCD_Send_Pulse();
 164:	0e 94 65 00 	call	0xca	; 0xca <LCD_Send_Pulse>
    #endif
}
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <LCD_Goto_XY>:
	}
	
}
void LCD_Goto_XY(unsigned char row , unsigned char column)
{
	if(row == 1)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	49 f4       	brne	.+18     	; 0x182 <LCD_Goto_XY+0x16>
	{
		if(column > 0 && column < 16 )
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	86 0f       	add	r24, r22
 174:	8f 30       	cpi	r24, 0x0F	; 15
 176:	78 f4       	brcc	.+30     	; 0x196 <LCD_Goto_XY+0x2a>
		LCD_Send_Command(0x80+column);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	86 0f       	add	r24, r22
 17c:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
 180:	08 95       	ret
	}
	else if( row == 2)
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	41 f4       	brne	.+16     	; 0x196 <LCD_Goto_XY+0x2a>
	{
		if(column > 0 && column < 16 )
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	86 0f       	add	r24, r22
 18a:	8f 30       	cpi	r24, 0x0F	; 15
 18c:	20 f4       	brcc	.+8      	; 0x196 <LCD_Goto_XY+0x2a>
		LCD_Send_Command(0xC0+column);
 18e:	80 ec       	ldi	r24, 0xC0	; 192
 190:	86 0f       	add	r24, r22
 192:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
 196:	08 95       	ret

00000198 <LCD_Clear_Screen>:
	}
}
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_Clear_Display);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
 19e:	08 95       	ret

000001a0 <LCD_Init>:
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x4>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0xa>
 1aa:	00 00       	nop
}
void LCD_Init()
{
	_delay_ms(20);
	//Setting Control pins as output 
	DataDir_LCD_CTRL |=((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 1ac:	87 b3       	in	r24, 0x17	; 23
 1ae:	8e 60       	ori	r24, 0x0E	; 14
 1b0:	87 bb       	out	0x17, r24	; 23
	//Masking off CTRL bits
	LCD_CTRL &=~((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 1b2:	88 b3       	in	r24, 0x18	; 24
 1b4:	81 7f       	andi	r24, 0xF1	; 241
 1b6:	88 bb       	out	0x18, r24	; 24
	_delay_ms(15);
	LCD_Clear_Screen();
	LCD_Send_Command(LCD_8bit_2Line);
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |= 0x0f;
 1b8:	8a b3       	in	r24, 0x1a	; 26
 1ba:	8f 60       	ori	r24, 0x0F	; 15
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	85 ea       	ldi	r24, 0xA5	; 165
 1c0:	9e e0       	ldi	r25, 0x0E	; 14
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCD_Init+0x22>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <LCD_Init+0x28>
 1c8:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 1ca:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Clear_Screen>
	LCD_Send_Command(0x02);
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
	LCD_Send_Command(LCD_4bit_2_Line);
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
	#endif
	LCD_Send_Command(LCD_Entry_Mode);
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Send_Command>
 1ec:	08 95       	ret

000001ee <LCD_Send_A_String>:
	//Send LSB NIbble
	LCD_Send_Pulse();
    #endif
}
void LCD_Send_A_String(char * str)
{ 
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	8c 01       	movw	r16, r24
	int i ;  
	for(i=0;str[i] != '\0' ; i++)
 1f8:	c0 e0       	ldi	r28, 0x00	; 0
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	14 c0       	rjmp	.+40     	; 0x226 <LCD_Send_A_String+0x38>
	{
		LCD_Send_A_Character(str[i]);
 1fe:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Send_A_Character>
		if(i==16)
 202:	c0 31       	cpi	r28, 0x10	; 16
 204:	d1 05       	cpc	r29, r1
 206:	29 f4       	brne	.+10     	; 0x212 <LCD_Send_A_String+0x24>
		{
			LCD_Goto_XY(2,1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	82 e0       	ldi	r24, 0x02	; 2
 20c:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Goto_XY>
 210:	09 c0       	rjmp	.+18     	; 0x224 <LCD_Send_A_String+0x36>
		}
		else if ( i == 32)
 212:	c0 32       	cpi	r28, 0x20	; 32
 214:	d1 05       	cpc	r29, r1
 216:	31 f4       	brne	.+12     	; 0x224 <LCD_Send_A_String+0x36>
		{
			LCD_Clear_Screen();
 218:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Clear_Screen>
			LCD_Goto_XY(1,1);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Goto_XY>
    #endif
}
void LCD_Send_A_String(char * str)
{ 
	int i ;  
	for(i=0;str[i] != '\0' ; i++)
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	f8 01       	movw	r30, r16
 228:	ec 0f       	add	r30, r28
 22a:	fd 1f       	adc	r31, r29
 22c:	80 81       	ld	r24, Z
 22e:	81 11       	cpse	r24, r1
 230:	e6 cf       	rjmp	.-52     	; 0x1fe <LCD_Send_A_String+0x10>
			LCD_Clear_Screen();
			LCD_Goto_XY(1,1);
		}
	}
	
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <Send_Master>:
#include "SPI.h"
#include "LCD.h"
#include "GPIO.h"
#define MCU_Act_As_Master
uint8_t Send_Master(uint8_t  data)
{
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
	uint8_t received;
	MCAL_GPIO_WritePin(GPIOB,GPIO_PINS_PIN4,PIN_Reset);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	64 e0       	ldi	r22, 0x04	; 4
 244:	86 e3       	ldi	r24, 0x36	; 54
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCAL_GPIO_WritePin>
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ee       	ldi	r24, 0xE1	; 225
 250:	94 e0       	ldi	r25, 0x04	; 4
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <Send_Master+0x16>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <Send_Master+0x20>
 25c:	00 00       	nop
	_delay_ms(200);
	MCAL_SPI_SendData(data);
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <MCAL_SPI_SendData>
	received=MCAL_SPI_receiveData();
 264:	0e 94 03 04 	call	0x806	; 0x806 <MCAL_SPI_receiveData>
	return received;
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <SPI_INT>:
void SPI_INT(void)
{
	S_SPI_Config_t * SPI_Config;
	#ifdef MCU_Act_As_Master
	SPI_Config->SPI_Mode = SPI_Mode_Master;
 26c:	e0 e0       	ldi	r30, 0x00	; 0
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	10 82       	st	Z, r1
	SPI_Config->SPI_Data_Order= SPI_Order_MSB;
 272:	12 82       	std	Z+2, r1	; 0x02
	SPI_Config->SPI_Interrupt=SPI_Interrupt_Disable;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	81 83       	std	Z+1, r24	; 0x01
	SPI_Config->SPI_Speed=SPI_Speed_FCPU_8;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	83 83       	std	Z+3, r24	; 0x03
	SPI_Config->SPI_Clock_Phase=SPI_Clock_Phase_First_Edge;
 27c:	15 82       	std	Z+5, r1	; 0x05
	SPI_Config->SPI_Clock_Polarity=SPI_Clock_Polarity_High;
 27e:	14 82       	std	Z+4, r1	; 0x04
	#endif
	#ifdef MCU_Act_As_Slave
		SPI_Config->SPI_Mode = SPI_Mode_Slave;
     	SPI_Config->SPI_Interrupt=SPI_Interrupt_Disable;
    #endif
	MCAL_SPI_Init(SPI_Config);
 280:	cf 01       	movw	r24, r30
 282:	0e 94 a4 02 	call	0x548	; 0x548 <MCAL_SPI_Init>
 286:	08 95       	ret

00000288 <main>:
	
}
int main(void)
{
	unsigned char x='0', Data = 'A',received;
	SPI_INT();
 288:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_INT>
	LCD_Init();
 28c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_Init>
	LCD_Clear_Screen();
 290:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_Clear_Screen>
	LCD_Goto_XY(1,0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Goto_XY>
	#ifdef MCU_Act_As_Master
		LCD_Send_A_String("Master");
 29c:	82 e6       	ldi	r24, 0x62	; 98
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Send_A_String>
	MCAL_SPI_Init(SPI_Config);
	
}
int main(void)
{
	unsigned char x='0', Data = 'A',received;
 2a4:	d1 e4       	ldi	r29, 0x41	; 65
 2a6:	c0 e3       	ldi	r28, 0x30	; 48
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <main+0x24>
		Data = 'A';	
		x++;
		LCD_Goto_XY(2,1);
		LCD_Send_A_Character(received);
		if(x == '9')
		x='0';
 2aa:	c0 e3       	ldi	r28, 0x30	; 48
	#ifdef MCU_Act_As_Slave
		LCD_Send_A_String("Slave");
	#endif
    while (1) 
    {
		LCD_Goto_XY(1,9);
 2ac:	69 e0       	ldi	r22, 0x09	; 9
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Goto_XY>
		LCD_Send_A_Character(x);
 2b4:	8c 2f       	mov	r24, r28
 2b6:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Send_A_Character>
		MCAL_GPIO_WritePin(GPIOB,GPIO_PINS_PIN4,PIN_Reset);
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	64 e0       	ldi	r22, 0x04	; 4
 2be:	86 e3       	ldi	r24, 0x36	; 54
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 66 02 	call	0x4cc	; 0x4cc <MCAL_GPIO_WritePin>
		received=Send_Master(Data);
 2c6:	8d 2f       	mov	r24, r29
 2c8:	0e 94 1e 01 	call	0x23c	; 0x23c <Send_Master>
 2cc:	18 2f       	mov	r17, r24
		Data++;
 2ce:	df 5f       	subi	r29, 0xFF	; 255
		if(Data == ('Z'+1))
 2d0:	db 35       	cpi	r29, 0x5B	; 91
 2d2:	09 f4       	brne	.+2      	; 0x2d6 <main+0x4e>
		Data = 'A';	
 2d4:	d1 e4       	ldi	r29, 0x41	; 65
		x++;
 2d6:	cf 5f       	subi	r28, 0xFF	; 255
		LCD_Goto_XY(2,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_Goto_XY>
		LCD_Send_A_Character(received);
 2e0:	81 2f       	mov	r24, r17
 2e2:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Send_A_Character>
		if(x == '9')
 2e6:	c9 33       	cpi	r28, 0x39	; 57
 2e8:	09 f7       	brne	.-62     	; 0x2ac <main+0x24>
 2ea:	df cf       	rjmp	.-66     	; 0x2aa <main+0x22>

000002ec <MCAL_GPIO_Init>:
uint8_t MCAL_GPIO_ReadPORT(S_GPIO_t * GPIOx)
{
	uint8_t Port_State;
	Port_State = GPIOx->PORT.PORT;
	return Port_State;
}
 2ec:	fc 01       	movw	r30, r24
 2ee:	db 01       	movw	r26, r22
 2f0:	8c 91       	ld	r24, X
 2f2:	81 11       	cpse	r24, r1
 2f4:	1b c0       	rjmp	.+54     	; 0x32c <MCAL_GPIO_Init+0x40>
 2f6:	11 96       	adiw	r26, 0x01	; 1
 2f8:	8c 91       	ld	r24, X
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	39 f4       	brne	.+14     	; 0x30c <MCAL_GPIO_Init+0x20>
 2fe:	81 81       	ldd	r24, Z+1	; 0x01
 300:	81 60       	ori	r24, 0x01	; 1
 302:	81 83       	std	Z+1, r24	; 0x01
 304:	82 81       	ldd	r24, Z+2	; 0x02
 306:	8e 7f       	andi	r24, 0xFE	; 254
 308:	82 83       	std	Z+2, r24	; 0x02
 30a:	08 95       	ret
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	39 f4       	brne	.+14     	; 0x31e <MCAL_GPIO_Init+0x32>
 310:	81 81       	ldd	r24, Z+1	; 0x01
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	81 83       	std	Z+1, r24	; 0x01
 316:	82 81       	ldd	r24, Z+2	; 0x02
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	82 83       	std	Z+2, r24	; 0x02
 31c:	08 95       	ret
 31e:	81 81       	ldd	r24, Z+1	; 0x01
 320:	81 60       	ori	r24, 0x01	; 1
 322:	81 83       	std	Z+1, r24	; 0x01
 324:	82 81       	ldd	r24, Z+2	; 0x02
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	82 83       	std	Z+2, r24	; 0x02
 32a:	08 95       	ret
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	e1 f4       	brne	.+56     	; 0x368 <MCAL_GPIO_Init+0x7c>
 330:	db 01       	movw	r26, r22
 332:	11 96       	adiw	r26, 0x01	; 1
 334:	8c 91       	ld	r24, X
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	39 f4       	brne	.+14     	; 0x348 <MCAL_GPIO_Init+0x5c>
 33a:	81 81       	ldd	r24, Z+1	; 0x01
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	81 83       	std	Z+1, r24	; 0x01
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	82 83       	std	Z+2, r24	; 0x02
 346:	08 95       	ret
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	39 f4       	brne	.+14     	; 0x35a <MCAL_GPIO_Init+0x6e>
 34c:	81 81       	ldd	r24, Z+1	; 0x01
 34e:	8d 7f       	andi	r24, 0xFD	; 253
 350:	81 83       	std	Z+1, r24	; 0x01
 352:	82 81       	ldd	r24, Z+2	; 0x02
 354:	8d 7f       	andi	r24, 0xFD	; 253
 356:	82 83       	std	Z+2, r24	; 0x02
 358:	08 95       	ret
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	81 83       	std	Z+1, r24	; 0x01
 360:	82 81       	ldd	r24, Z+2	; 0x02
 362:	8d 7f       	andi	r24, 0xFD	; 253
 364:	82 83       	std	Z+2, r24	; 0x02
 366:	08 95       	ret
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	e1 f4       	brne	.+56     	; 0x3a4 <MCAL_GPIO_Init+0xb8>
 36c:	db 01       	movw	r26, r22
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	8c 91       	ld	r24, X
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	39 f4       	brne	.+14     	; 0x384 <MCAL_GPIO_Init+0x98>
 376:	81 81       	ldd	r24, Z+1	; 0x01
 378:	84 60       	ori	r24, 0x04	; 4
 37a:	81 83       	std	Z+1, r24	; 0x01
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	8b 7f       	andi	r24, 0xFB	; 251
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	08 95       	ret
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	39 f4       	brne	.+14     	; 0x396 <MCAL_GPIO_Init+0xaa>
 388:	81 81       	ldd	r24, Z+1	; 0x01
 38a:	87 7f       	andi	r24, 0xF7	; 247
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	82 81       	ldd	r24, Z+2	; 0x02
 390:	87 7f       	andi	r24, 0xF7	; 247
 392:	82 83       	std	Z+2, r24	; 0x02
 394:	08 95       	ret
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	88 60       	ori	r24, 0x08	; 8
 39a:	81 83       	std	Z+1, r24	; 0x01
 39c:	82 81       	ldd	r24, Z+2	; 0x02
 39e:	87 7f       	andi	r24, 0xF7	; 247
 3a0:	82 83       	std	Z+2, r24	; 0x02
 3a2:	08 95       	ret
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	e1 f4       	brne	.+56     	; 0x3e0 <MCAL_GPIO_Init+0xf4>
 3a8:	db 01       	movw	r26, r22
 3aa:	11 96       	adiw	r26, 0x01	; 1
 3ac:	8c 91       	ld	r24, X
 3ae:	82 30       	cpi	r24, 0x02	; 2
 3b0:	39 f4       	brne	.+14     	; 0x3c0 <MCAL_GPIO_Init+0xd4>
 3b2:	81 81       	ldd	r24, Z+1	; 0x01
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	81 83       	std	Z+1, r24	; 0x01
 3b8:	82 81       	ldd	r24, Z+2	; 0x02
 3ba:	87 7f       	andi	r24, 0xF7	; 247
 3bc:	82 83       	std	Z+2, r24	; 0x02
 3be:	08 95       	ret
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	39 f4       	brne	.+14     	; 0x3d2 <MCAL_GPIO_Init+0xe6>
 3c4:	81 81       	ldd	r24, Z+1	; 0x01
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	81 83       	std	Z+1, r24	; 0x01
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	87 7f       	andi	r24, 0xF7	; 247
 3ce:	82 83       	std	Z+2, r24	; 0x02
 3d0:	08 95       	ret
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	81 83       	std	Z+1, r24	; 0x01
 3d8:	82 81       	ldd	r24, Z+2	; 0x02
 3da:	87 7f       	andi	r24, 0xF7	; 247
 3dc:	82 83       	std	Z+2, r24	; 0x02
 3de:	08 95       	ret
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	e1 f4       	brne	.+56     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3e4:	db 01       	movw	r26, r22
 3e6:	11 96       	adiw	r26, 0x01	; 1
 3e8:	8c 91       	ld	r24, X
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	39 f4       	brne	.+14     	; 0x3fc <MCAL_GPIO_Init+0x110>
 3ee:	81 81       	ldd	r24, Z+1	; 0x01
 3f0:	80 61       	ori	r24, 0x10	; 16
 3f2:	81 83       	std	Z+1, r24	; 0x01
 3f4:	82 81       	ldd	r24, Z+2	; 0x02
 3f6:	8f 7e       	andi	r24, 0xEF	; 239
 3f8:	82 83       	std	Z+2, r24	; 0x02
 3fa:	08 95       	ret
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	39 f4       	brne	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	81 81       	ldd	r24, Z+1	; 0x01
 402:	8f 7e       	andi	r24, 0xEF	; 239
 404:	81 83       	std	Z+1, r24	; 0x01
 406:	82 81       	ldd	r24, Z+2	; 0x02
 408:	8f 7e       	andi	r24, 0xEF	; 239
 40a:	82 83       	std	Z+2, r24	; 0x02
 40c:	08 95       	ret
 40e:	81 81       	ldd	r24, Z+1	; 0x01
 410:	80 61       	ori	r24, 0x10	; 16
 412:	81 83       	std	Z+1, r24	; 0x01
 414:	82 81       	ldd	r24, Z+2	; 0x02
 416:	8f 7e       	andi	r24, 0xEF	; 239
 418:	82 83       	std	Z+2, r24	; 0x02
 41a:	08 95       	ret
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	e1 f4       	brne	.+56     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 420:	db 01       	movw	r26, r22
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	8c 91       	ld	r24, X
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	39 f4       	brne	.+14     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42a:	81 81       	ldd	r24, Z+1	; 0x01
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	81 83       	std	Z+1, r24	; 0x01
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	8f 7d       	andi	r24, 0xDF	; 223
 434:	82 83       	std	Z+2, r24	; 0x02
 436:	08 95       	ret
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	39 f4       	brne	.+14     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 43e:	8f 7d       	andi	r24, 0xDF	; 223
 440:	81 83       	std	Z+1, r24	; 0x01
 442:	82 81       	ldd	r24, Z+2	; 0x02
 444:	8f 7d       	andi	r24, 0xDF	; 223
 446:	82 83       	std	Z+2, r24	; 0x02
 448:	08 95       	ret
 44a:	81 81       	ldd	r24, Z+1	; 0x01
 44c:	80 62       	ori	r24, 0x20	; 32
 44e:	81 83       	std	Z+1, r24	; 0x01
 450:	82 81       	ldd	r24, Z+2	; 0x02
 452:	8f 7d       	andi	r24, 0xDF	; 223
 454:	82 83       	std	Z+2, r24	; 0x02
 456:	08 95       	ret
 458:	86 30       	cpi	r24, 0x06	; 6
 45a:	e1 f4       	brne	.+56     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 45c:	db 01       	movw	r26, r22
 45e:	11 96       	adiw	r26, 0x01	; 1
 460:	8c 91       	ld	r24, X
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	39 f4       	brne	.+14     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 466:	81 81       	ldd	r24, Z+1	; 0x01
 468:	80 64       	ori	r24, 0x40	; 64
 46a:	81 83       	std	Z+1, r24	; 0x01
 46c:	82 81       	ldd	r24, Z+2	; 0x02
 46e:	8f 7b       	andi	r24, 0xBF	; 191
 470:	82 83       	std	Z+2, r24	; 0x02
 472:	08 95       	ret
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	39 f4       	brne	.+14     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 478:	81 81       	ldd	r24, Z+1	; 0x01
 47a:	8f 7b       	andi	r24, 0xBF	; 191
 47c:	81 83       	std	Z+1, r24	; 0x01
 47e:	82 81       	ldd	r24, Z+2	; 0x02
 480:	8f 7b       	andi	r24, 0xBF	; 191
 482:	82 83       	std	Z+2, r24	; 0x02
 484:	08 95       	ret
 486:	81 81       	ldd	r24, Z+1	; 0x01
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	81 83       	std	Z+1, r24	; 0x01
 48c:	82 81       	ldd	r24, Z+2	; 0x02
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	82 83       	std	Z+2, r24	; 0x02
 492:	08 95       	ret
 494:	db 01       	movw	r26, r22
 496:	11 96       	adiw	r26, 0x01	; 1
 498:	8c 91       	ld	r24, X
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	39 f4       	brne	.+14     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 49e:	81 81       	ldd	r24, Z+1	; 0x01
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	81 83       	std	Z+1, r24	; 0x01
 4a4:	82 81       	ldd	r24, Z+2	; 0x02
 4a6:	8f 77       	andi	r24, 0x7F	; 127
 4a8:	82 83       	std	Z+2, r24	; 0x02
 4aa:	08 95       	ret
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	39 f4       	brne	.+14     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b0:	81 81       	ldd	r24, Z+1	; 0x01
 4b2:	8f 77       	andi	r24, 0x7F	; 127
 4b4:	81 83       	std	Z+1, r24	; 0x01
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	8f 77       	andi	r24, 0x7F	; 127
 4ba:	82 83       	std	Z+2, r24	; 0x02
 4bc:	08 95       	ret
 4be:	81 81       	ldd	r24, Z+1	; 0x01
 4c0:	80 68       	ori	r24, 0x80	; 128
 4c2:	81 83       	std	Z+1, r24	; 0x01
 4c4:	82 81       	ldd	r24, Z+2	; 0x02
 4c6:	8f 77       	andi	r24, 0x7F	; 127
 4c8:	82 83       	std	Z+2, r24	; 0x02
 4ca:	08 95       	ret

000004cc <MCAL_GPIO_WritePin>:
* @param [in] 	-value: specifies the value should be written on Pin
* @retval 		-None
* Note			-none
*/
void MCAL_GPIO_WritePin  (S_GPIO_t * GPIOx , uint8_t  Pin_Number , uint8_t value )
{
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
	switch(Pin_Number)
 4d0:	06 2f       	mov	r16, r22
 4d2:	10 e0       	ldi	r17, 0x00	; 0
 4d4:	08 30       	cpi	r16, 0x08	; 8
 4d6:	11 05       	cpc	r17, r1
 4d8:	a0 f5       	brcc	.+104    	; 0x542 <MCAL_GPIO_WritePin+0x76>
 4da:	f8 01       	movw	r30, r16
 4dc:	e6 5d       	subi	r30, 0xD6	; 214
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
 4e0:	0c 94 81 04 	jmp	0x902	; 0x902 <__tablejump2__>
	{
		case GPIO_PINS_PIN0 :
		{
			GPIOx->PORT.Bits.Bit0 = value;
 4e4:	fc 01       	movw	r30, r24
 4e6:	22 81       	ldd	r18, Z+2	; 0x02
 4e8:	40 fb       	bst	r20, 0
 4ea:	20 f9       	bld	r18, 0
 4ec:	22 83       	std	Z+2, r18	; 0x02
			break;
 4ee:	29 c0       	rjmp	.+82     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN1 :
		{
			GPIOx->PORT.Bits.Bit1 = value;
 4f0:	fc 01       	movw	r30, r24
 4f2:	22 81       	ldd	r18, Z+2	; 0x02
 4f4:	40 fb       	bst	r20, 0
 4f6:	21 f9       	bld	r18, 1
 4f8:	22 83       	std	Z+2, r18	; 0x02
			break;
 4fa:	23 c0       	rjmp	.+70     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN2 :
		{
			GPIOx->PORT.Bits.Bit2 = value;
 4fc:	fc 01       	movw	r30, r24
 4fe:	22 81       	ldd	r18, Z+2	; 0x02
 500:	40 fb       	bst	r20, 0
 502:	22 f9       	bld	r18, 2
 504:	22 83       	std	Z+2, r18	; 0x02
			break;
 506:	1d c0       	rjmp	.+58     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN3 :
		{
			GPIOx->PORT.Bits.Bit3 = value;
 508:	fc 01       	movw	r30, r24
 50a:	22 81       	ldd	r18, Z+2	; 0x02
 50c:	40 fb       	bst	r20, 0
 50e:	23 f9       	bld	r18, 3
 510:	22 83       	std	Z+2, r18	; 0x02
			break;
 512:	17 c0       	rjmp	.+46     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN4 :
		{
			GPIOx->PORT.Bits.Bit4 = value;
 514:	fc 01       	movw	r30, r24
 516:	22 81       	ldd	r18, Z+2	; 0x02
 518:	40 fb       	bst	r20, 0
 51a:	24 f9       	bld	r18, 4
 51c:	22 83       	std	Z+2, r18	; 0x02
			break;
 51e:	11 c0       	rjmp	.+34     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN5 :
		{
			GPIOx->PORT.Bits.Bit5 = value;
 520:	fc 01       	movw	r30, r24
 522:	22 81       	ldd	r18, Z+2	; 0x02
 524:	40 fb       	bst	r20, 0
 526:	25 f9       	bld	r18, 5
 528:	22 83       	std	Z+2, r18	; 0x02
			break;
 52a:	0b c0       	rjmp	.+22     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN6 :
		{
			GPIOx->PORT.Bits.Bit6 = value;
 52c:	fc 01       	movw	r30, r24
 52e:	22 81       	ldd	r18, Z+2	; 0x02
 530:	40 fb       	bst	r20, 0
 532:	26 f9       	bld	r18, 6
 534:	22 83       	std	Z+2, r18	; 0x02
			break;
 536:	05 c0       	rjmp	.+10     	; 0x542 <MCAL_GPIO_WritePin+0x76>
		}
		case GPIO_PINS_PIN7 :
		{
			GPIOx->PORT.Bits.Bit7 = value;
 538:	fc 01       	movw	r30, r24
 53a:	22 81       	ldd	r18, Z+2	; 0x02
 53c:	40 fb       	bst	r20, 0
 53e:	27 f9       	bld	r18, 7
 540:	22 83       	std	Z+2, r18	; 0x02
			break;
		}
		
		
	}
}
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <MCAL_SPI_Init>:
uint8_t MCAL_SPI_Tx_Rx(uint8_t Data)
{
	SPI1->SPDR_=Data;
	while(!(SPI1->SPSR_.Bits.Bit7));
	return SPI1->SPDR_;
}
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	8c 01       	movw	r16, r24
 554:	dc 01       	movw	r26, r24
 556:	8c 91       	ld	r24, X
 558:	88 23       	and	r24, r24
 55a:	21 f0       	breq	.+8      	; 0x564 <MCAL_SPI_Init+0x1c>
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	09 f4       	brne	.+2      	; 0x562 <MCAL_SPI_Init+0x1a>
 560:	eb c0       	rjmp	.+470    	; 0x738 <MCAL_SPI_Init+0x1f0>
 562:	16 c1       	rjmp	.+556    	; 0x790 <MCAL_SPI_Init+0x248>
 564:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 568:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 56c:	80 81       	ld	r24, Z
 56e:	80 61       	ori	r24, 0x10	; 16
 570:	80 83       	st	Z, r24
 572:	68 94       	set
 574:	ff 24       	eor	r15, r15
 576:	f1 f8       	bld	r15, 1
 578:	c0 e0       	ldi	r28, 0x00	; 0
 57a:	d0 e0       	ldi	r29, 0x00	; 0
 57c:	f9 82       	std	Y+1, r15	; 0x01
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	88 83       	st	Y, r24
 582:	be 01       	movw	r22, r28
 584:	86 e3       	ldi	r24, 0x36	; 54
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 58c:	f9 82       	std	Y+1, r15	; 0x01
 58e:	87 e0       	ldi	r24, 0x07	; 7
 590:	88 83       	st	Y, r24
 592:	be 01       	movw	r22, r28
 594:	86 e3       	ldi	r24, 0x36	; 54
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 59c:	f9 82       	std	Y+1, r15	; 0x01
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	88 83       	st	Y, r24
 5a2:	be 01       	movw	r22, r28
 5a4:	86 e3       	ldi	r24, 0x36	; 54
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	89 83       	std	Y+1, r24	; 0x01
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	88 83       	st	Y, r24
 5b4:	be 01       	movw	r22, r28
 5b6:	86 e3       	ldi	r24, 0x36	; 54
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 5be:	f8 01       	movw	r30, r16
 5c0:	82 81       	ldd	r24, Z+2	; 0x02
 5c2:	88 23       	and	r24, r24
 5c4:	51 f0       	breq	.+20     	; 0x5da <MCAL_SPI_Init+0x92>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	79 f4       	brne	.+30     	; 0x5e8 <MCAL_SPI_Init+0xa0>
 5ca:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5ce:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5d2:	80 81       	ld	r24, Z
 5d4:	80 62       	ori	r24, 0x20	; 32
 5d6:	80 83       	st	Z, r24
 5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <MCAL_SPI_Init+0xa0>
 5da:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5de:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5e2:	80 81       	ld	r24, Z
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	80 83       	st	Z, r24
 5e8:	d8 01       	movw	r26, r16
 5ea:	13 96       	adiw	r26, 0x03	; 3
 5ec:	ec 91       	ld	r30, X
 5ee:	8e 2f       	mov	r24, r30
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	87 30       	cpi	r24, 0x07	; 7
 5f4:	91 05       	cpc	r25, r1
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <MCAL_SPI_Init+0xb2>
 5f8:	cb c0       	rjmp	.+406    	; 0x790 <MCAL_SPI_Init+0x248>
 5fa:	fc 01       	movw	r30, r24
 5fc:	ee 5c       	subi	r30, 0xCE	; 206
 5fe:	ff 4f       	sbci	r31, 0xFF	; 255
 600:	0c 94 81 04 	jmp	0x902	; 0x902 <__tablejump2__>
 604:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 608:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 60c:	81 81       	ldd	r24, Z+1	; 0x01
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	81 83       	std	Z+1, r24	; 0x01
 612:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 616:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 61a:	80 81       	ld	r24, Z
 61c:	8e 7f       	andi	r24, 0xFE	; 254
 61e:	80 83       	st	Z, r24
 620:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 624:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 628:	80 81       	ld	r24, Z
 62a:	8d 7f       	andi	r24, 0xFD	; 253
 62c:	80 83       	st	Z, r24
 62e:	b0 c0       	rjmp	.+352    	; 0x790 <MCAL_SPI_Init+0x248>
 630:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 634:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 638:	81 81       	ldd	r24, Z+1	; 0x01
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	81 83       	std	Z+1, r24	; 0x01
 63e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 642:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 646:	80 81       	ld	r24, Z
 648:	8e 7f       	andi	r24, 0xFE	; 254
 64a:	80 83       	st	Z, r24
 64c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 650:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 654:	80 81       	ld	r24, Z
 656:	8d 7f       	andi	r24, 0xFD	; 253
 658:	80 83       	st	Z, r24
 65a:	9a c0       	rjmp	.+308    	; 0x790 <MCAL_SPI_Init+0x248>
 65c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 660:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 664:	81 81       	ldd	r24, Z+1	; 0x01
 666:	81 60       	ori	r24, 0x01	; 1
 668:	81 83       	std	Z+1, r24	; 0x01
 66a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 66e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 672:	80 81       	ld	r24, Z
 674:	8e 7f       	andi	r24, 0xFE	; 254
 676:	80 83       	st	Z, r24
 678:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 67c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 680:	80 81       	ld	r24, Z
 682:	82 60       	ori	r24, 0x02	; 2
 684:	80 83       	st	Z, r24
 686:	84 c0       	rjmp	.+264    	; 0x790 <MCAL_SPI_Init+0x248>
 688:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 68c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 690:	81 81       	ldd	r24, Z+1	; 0x01
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	81 83       	std	Z+1, r24	; 0x01
 696:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 69a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 69e:	80 81       	ld	r24, Z
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	80 83       	st	Z, r24
 6a4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6a8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6ac:	80 81       	ld	r24, Z
 6ae:	8d 7f       	andi	r24, 0xFD	; 253
 6b0:	80 83       	st	Z, r24
 6b2:	6e c0       	rjmp	.+220    	; 0x790 <MCAL_SPI_Init+0x248>
 6b4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6b8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6bc:	81 81       	ldd	r24, Z+1	; 0x01
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	81 83       	std	Z+1, r24	; 0x01
 6c2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6c6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6ca:	80 81       	ld	r24, Z
 6cc:	81 60       	ori	r24, 0x01	; 1
 6ce:	80 83       	st	Z, r24
 6d0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6d4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6d8:	80 81       	ld	r24, Z
 6da:	8d 7f       	andi	r24, 0xFD	; 253
 6dc:	80 83       	st	Z, r24
 6de:	58 c0       	rjmp	.+176    	; 0x790 <MCAL_SPI_Init+0x248>
 6e0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6e4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	81 60       	ori	r24, 0x01	; 1
 6ec:	81 83       	std	Z+1, r24	; 0x01
 6ee:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6f2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6f6:	80 81       	ld	r24, Z
 6f8:	8e 7f       	andi	r24, 0xFE	; 254
 6fa:	80 83       	st	Z, r24
 6fc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 700:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 704:	80 81       	ld	r24, Z
 706:	82 60       	ori	r24, 0x02	; 2
 708:	80 83       	st	Z, r24
 70a:	42 c0       	rjmp	.+132    	; 0x790 <MCAL_SPI_Init+0x248>
 70c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 710:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 714:	81 81       	ldd	r24, Z+1	; 0x01
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	81 83       	std	Z+1, r24	; 0x01
 71a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 71e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 722:	80 81       	ld	r24, Z
 724:	81 60       	ori	r24, 0x01	; 1
 726:	80 83       	st	Z, r24
 728:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 72c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 730:	80 81       	ld	r24, Z
 732:	82 60       	ori	r24, 0x02	; 2
 734:	80 83       	st	Z, r24
 736:	2c c0       	rjmp	.+88     	; 0x790 <MCAL_SPI_Init+0x248>
 738:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 73c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 740:	80 81       	ld	r24, Z
 742:	8f 7e       	andi	r24, 0xEF	; 239
 744:	80 83       	st	Z, r24
 746:	ff 24       	eor	r15, r15
 748:	f3 94       	inc	r15
 74a:	c0 e0       	ldi	r28, 0x00	; 0
 74c:	d0 e0       	ldi	r29, 0x00	; 0
 74e:	f9 82       	std	Y+1, r15	; 0x01
 750:	84 e0       	ldi	r24, 0x04	; 4
 752:	88 83       	st	Y, r24
 754:	be 01       	movw	r22, r28
 756:	86 e3       	ldi	r24, 0x36	; 54
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	89 83       	std	Y+1, r24	; 0x01
 762:	86 e0       	ldi	r24, 0x06	; 6
 764:	88 83       	st	Y, r24
 766:	be 01       	movw	r22, r28
 768:	86 e3       	ldi	r24, 0x36	; 54
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 770:	f9 82       	std	Y+1, r15	; 0x01
 772:	85 e0       	ldi	r24, 0x05	; 5
 774:	88 83       	st	Y, r24
 776:	be 01       	movw	r22, r28
 778:	86 e3       	ldi	r24, 0x36	; 54
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 780:	f9 82       	std	Y+1, r15	; 0x01
 782:	87 e0       	ldi	r24, 0x07	; 7
 784:	88 83       	st	Y, r24
 786:	be 01       	movw	r22, r28
 788:	86 e3       	ldi	r24, 0x36	; 54
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 76 01 	call	0x2ec	; 0x2ec <MCAL_GPIO_Init>
 790:	f8 01       	movw	r30, r16
 792:	81 81       	ldd	r24, Z+1	; 0x01
 794:	88 23       	and	r24, r24
 796:	19 f0       	breq	.+6      	; 0x79e <MCAL_SPI_Init+0x256>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	a9 f0       	breq	.+42     	; 0x7c6 <MCAL_SPI_Init+0x27e>
 79c:	1e c0       	rjmp	.+60     	; 0x7da <MCAL_SPI_Init+0x292>
 79e:	8f b7       	in	r24, 0x3f	; 63
 7a0:	80 68       	ori	r24, 0x80	; 128
 7a2:	8f bf       	out	0x3f, r24	; 63
 7a4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7a8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7ac:	80 81       	ld	r24, Z
 7ae:	80 68       	ori	r24, 0x80	; 128
 7b0:	80 83       	st	Z, r24
 7b2:	d8 01       	movw	r26, r16
 7b4:	16 96       	adiw	r26, 0x06	; 6
 7b6:	8d 91       	ld	r24, X+
 7b8:	9c 91       	ld	r25, X
 7ba:	17 97       	sbiw	r26, 0x07	; 7
 7bc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 7c0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 7c4:	0a c0       	rjmp	.+20     	; 0x7da <MCAL_SPI_Init+0x292>
 7c6:	8f b7       	in	r24, 0x3f	; 63
 7c8:	8f 77       	andi	r24, 0x7F	; 127
 7ca:	8f bf       	out	0x3f, r24	; 63
 7cc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7d4:	80 81       	ld	r24, Z
 7d6:	8f 77       	andi	r24, 0x7F	; 127
 7d8:	80 83       	st	Z, r24
 7da:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7de:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7e2:	80 81       	ld	r24, Z
 7e4:	80 64       	ori	r24, 0x40	; 64
 7e6:	80 83       	st	Z, r24
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	ff 90       	pop	r15
 7f2:	08 95       	ret

000007f4 <MCAL_SPI_SendData>:
 7f4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7f8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7fc:	82 83       	std	Z+2, r24	; 0x02
 7fe:	81 81       	ldd	r24, Z+1	; 0x01
 800:	88 23       	and	r24, r24
 802:	ec f7       	brge	.-6      	; 0x7fe <MCAL_SPI_SendData+0xa>
 804:	08 95       	ret

00000806 <MCAL_SPI_receiveData>:
 806:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 80a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 80e:	81 81       	ldd	r24, Z+1	; 0x01
 810:	88 23       	and	r24, r24
 812:	cc f7       	brge	.-14     	; 0x806 <MCAL_SPI_receiveData>
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	08 95       	ret

00000818 <__vector_12>:
ISR(SPI_STC_vect)
{
 818:	1f 92       	push	r1
 81a:	0f 92       	push	r0
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	0f 92       	push	r0
 820:	11 24       	eor	r1, r1
 822:	2f 93       	push	r18
 824:	3f 93       	push	r19
 826:	4f 93       	push	r20
 828:	5f 93       	push	r21
 82a:	6f 93       	push	r22
 82c:	7f 93       	push	r23
 82e:	8f 93       	push	r24
 830:	9f 93       	push	r25
 832:	af 93       	push	r26
 834:	bf 93       	push	r27
 836:	ef 93       	push	r30
 838:	ff 93       	push	r31
	GP_CallBack();
 83a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 83e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 842:	09 95       	icall
 844:	ff 91       	pop	r31
 846:	ef 91       	pop	r30
 848:	bf 91       	pop	r27
 84a:	af 91       	pop	r26
 84c:	9f 91       	pop	r25
 84e:	8f 91       	pop	r24
 850:	7f 91       	pop	r23
 852:	6f 91       	pop	r22
 854:	5f 91       	pop	r21
 856:	4f 91       	pop	r20
 858:	3f 91       	pop	r19
 85a:	2f 91       	pop	r18
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <__vector_13>:
		pRxBuffer++;
	}
	*pRxBuffer ='\0';
}
ISR(USART_RXC_vect)
{
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
	GP_CallBack();
 888:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 88c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 890:	09 95       	icall
}
 892:	ff 91       	pop	r31
 894:	ef 91       	pop	r30
 896:	bf 91       	pop	r27
 898:	af 91       	pop	r26
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	7f 91       	pop	r23
 8a0:	6f 91       	pop	r22
 8a2:	5f 91       	pop	r21
 8a4:	4f 91       	pop	r20
 8a6:	3f 91       	pop	r19
 8a8:	2f 91       	pop	r18
 8aa:	0f 90       	pop	r0
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	0f 90       	pop	r0
 8b0:	1f 90       	pop	r1
 8b2:	18 95       	reti

000008b4 <__vector_15>:

ISR(USART_TXC_vect)
{
 8b4:	1f 92       	push	r1
 8b6:	0f 92       	push	r0
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	0f 92       	push	r0
 8bc:	11 24       	eor	r1, r1
 8be:	2f 93       	push	r18
 8c0:	3f 93       	push	r19
 8c2:	4f 93       	push	r20
 8c4:	5f 93       	push	r21
 8c6:	6f 93       	push	r22
 8c8:	7f 93       	push	r23
 8ca:	8f 93       	push	r24
 8cc:	9f 93       	push	r25
 8ce:	af 93       	push	r26
 8d0:	bf 93       	push	r27
 8d2:	ef 93       	push	r30
 8d4:	ff 93       	push	r31
	GP_CallBack();
 8d6:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 8da:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 8de:	09 95       	icall
 8e0:	ff 91       	pop	r31
 8e2:	ef 91       	pop	r30
 8e4:	bf 91       	pop	r27
 8e6:	af 91       	pop	r26
 8e8:	9f 91       	pop	r25
 8ea:	8f 91       	pop	r24
 8ec:	7f 91       	pop	r23
 8ee:	6f 91       	pop	r22
 8f0:	5f 91       	pop	r21
 8f2:	4f 91       	pop	r20
 8f4:	3f 91       	pop	r19
 8f6:	2f 91       	pop	r18
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti

00000902 <__tablejump2__>:
 902:	ee 0f       	add	r30, r30
 904:	ff 1f       	adc	r31, r31
 906:	05 90       	lpm	r0, Z+
 908:	f4 91       	lpm	r31, Z
 90a:	e0 2d       	mov	r30, r0
 90c:	09 94       	ijmp

0000090e <_exit>:
 90e:	f8 94       	cli

00000910 <__stop_program>:
 910:	ff cf       	rjmp	.-2      	; 0x910 <__stop_program>
