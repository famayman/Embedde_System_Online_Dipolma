
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  4 .ARM          00000000  08000290  08000290  00010298  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000290  08000298  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000290  08000290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000294  08000294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000298  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000298  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000912  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001cfc  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000629  00000000  00000000  00012af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007f64  00000000  00000000  0001311d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000005c  00000000  00000000  0001b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000278 	.word	0x08000278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000278 	.word	0x08000278

08000108 <main>:
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
#define RCC_CFGR  *(volatile uint32_t *)(RCC_Base+0x04)
#define RCC_CR    *(volatile uint32_t *)(RCC_Base+0x00)
int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
//Enabling Clock
	RCC_APB2EN |= (1<<2);
 800010e:	4b2b      	ldr	r3, [pc, #172]	; (80001bc <main+0xb4>)
 8000110:	681a      	ldr	r2, [r3, #0]
 8000112:	4b2a      	ldr	r3, [pc, #168]	; (80001bc <main+0xb4>)
 8000114:	2104      	movs	r1, #4
 8000116:	430a      	orrs	r2, r1
 8000118:	601a      	str	r2, [r3, #0]
//Configuring Clock
	RCC_CFGR |= (0b0110<<18);
 800011a:	4b29      	ldr	r3, [pc, #164]	; (80001c0 <main+0xb8>)
 800011c:	681a      	ldr	r2, [r3, #0]
 800011e:	4b28      	ldr	r3, [pc, #160]	; (80001c0 <main+0xb8>)
 8000120:	21c0      	movs	r1, #192	; 0xc0
 8000122:	0349      	lsls	r1, r1, #13
 8000124:	430a      	orrs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]
	RCC_CFGR |= (0b100<<8);
 8000128:	4b25      	ldr	r3, [pc, #148]	; (80001c0 <main+0xb8>)
 800012a:	681a      	ldr	r2, [r3, #0]
 800012c:	4b24      	ldr	r3, [pc, #144]	; (80001c0 <main+0xb8>)
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	00c9      	lsls	r1, r1, #3
 8000132:	430a      	orrs	r2, r1
 8000134:	601a      	str	r2, [r3, #0]
	RCC_CFGR |= (0b101<<11);
 8000136:	4b22      	ldr	r3, [pc, #136]	; (80001c0 <main+0xb8>)
 8000138:	681a      	ldr	r2, [r3, #0]
 800013a:	4b21      	ldr	r3, [pc, #132]	; (80001c0 <main+0xb8>)
 800013c:	21a0      	movs	r1, #160	; 0xa0
 800013e:	0189      	lsls	r1, r1, #6
 8000140:	430a      	orrs	r2, r1
 8000142:	601a      	str	r2, [r3, #0]
	RCC_CFGR |= (0b10<<0);
 8000144:	4b1e      	ldr	r3, [pc, #120]	; (80001c0 <main+0xb8>)
 8000146:	681a      	ldr	r2, [r3, #0]
 8000148:	4b1d      	ldr	r3, [pc, #116]	; (80001c0 <main+0xb8>)
 800014a:	2102      	movs	r1, #2
 800014c:	430a      	orrs	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
	RCC_CR |= (0b1<<24);
 8000150:	4b1c      	ldr	r3, [pc, #112]	; (80001c4 <main+0xbc>)
 8000152:	681a      	ldr	r2, [r3, #0]
 8000154:	4b1b      	ldr	r3, [pc, #108]	; (80001c4 <main+0xbc>)
 8000156:	2180      	movs	r1, #128	; 0x80
 8000158:	0449      	lsls	r1, r1, #17
 800015a:	430a      	orrs	r2, r1
 800015c:	601a      	str	r2, [r3, #0]
//Init GPIOA
GPIOA_CRH &= 0xFF0FFFFF;
 800015e:	4b1a      	ldr	r3, [pc, #104]	; (80001c8 <main+0xc0>)
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	4b19      	ldr	r3, [pc, #100]	; (80001c8 <main+0xc0>)
 8000164:	4919      	ldr	r1, [pc, #100]	; (80001cc <main+0xc4>)
 8000166:	400a      	ands	r2, r1
 8000168:	601a      	str	r2, [r3, #0]
GPIOA_CRH |= 0x00200000;
 800016a:	4b17      	ldr	r3, [pc, #92]	; (80001c8 <main+0xc0>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b16      	ldr	r3, [pc, #88]	; (80001c8 <main+0xc0>)
 8000170:	2180      	movs	r1, #128	; 0x80
 8000172:	0389      	lsls	r1, r1, #14
 8000174:	430a      	orrs	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
while(1)
{
GPIOA_ODR |= 1<<13 ;
 8000178:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <main+0xc8>)
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4b14      	ldr	r3, [pc, #80]	; (80001d0 <main+0xc8>)
 800017e:	2180      	movs	r1, #128	; 0x80
 8000180:	0189      	lsls	r1, r1, #6
 8000182:	430a      	orrs	r2, r1
 8000184:	601a      	str	r2, [r3, #0]
for (int i = 0; i < 5000; i++); // arbitrary delay
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e002      	b.n	8000192 <main+0x8a>
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <main+0xcc>)
 8000196:	4293      	cmp	r3, r2
 8000198:	ddf8      	ble.n	800018c <main+0x84>
GPIOA_ODR &= ~(1<<13) ;
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <main+0xc8>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <main+0xc8>)
 80001a0:	490d      	ldr	r1, [pc, #52]	; (80001d8 <main+0xd0>)
 80001a2:	400a      	ands	r2, r1
 80001a4:	601a      	str	r2, [r3, #0]
for (int i = 0; i < 5000; i++); // arbitrary delay
 80001a6:	2300      	movs	r3, #0
 80001a8:	603b      	str	r3, [r7, #0]
 80001aa:	e002      	b.n	80001b2 <main+0xaa>
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	3301      	adds	r3, #1
 80001b0:	603b      	str	r3, [r7, #0]
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <main+0xcc>)
 80001b6:	4293      	cmp	r3, r2
 80001b8:	ddf8      	ble.n	80001ac <main+0xa4>
GPIOA_ODR |= 1<<13 ;
 80001ba:	e7dd      	b.n	8000178 <main+0x70>
 80001bc:	40021018 	.word	0x40021018
 80001c0:	40021004 	.word	0x40021004
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010804 	.word	0x40010804
 80001cc:	ff0fffff 	.word	0xff0fffff
 80001d0:	4001080c 	.word	0x4001080c
 80001d4:	00001387 	.word	0x00001387
 80001d8:	ffffdfff 	.word	0xffffdfff

080001dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001e0:	e000      	b.n	80001e4 <Reset_Handler+0x8>
 80001e2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e6:	490d      	ldr	r1, [pc, #52]	; (800021c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <LoopForever+0xe>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ec:	e002      	b.n	80001f4 <LoopCopyDataInit>

080001ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f2:	3304      	adds	r3, #4

080001f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f8:	d3f9      	bcc.n	80001ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <LoopForever+0x16>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000200:	e001      	b.n	8000206 <LoopFillZerobss>

08000202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000204:	3204      	adds	r2, #4

08000206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000208:	d3fb      	bcc.n	8000202 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800020a:	f000 f811 	bl	8000230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020e:	f7ff ff7b 	bl	8000108 <main>

08000212 <LoopForever>:

LoopForever:
    b LoopForever
 8000212:	e7fe      	b.n	8000212 <LoopForever>
  ldr   r0, =_estack
 8000214:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000220:	08000298 	.word	0x08000298
  ldr r2, =_sbss
 8000224:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000228:	2000001c 	.word	0x2000001c

0800022c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC_IRQHandler>
	...

08000230 <__libc_init_array>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	2600      	movs	r6, #0
 8000234:	4d0c      	ldr	r5, [pc, #48]	; (8000268 <__libc_init_array+0x38>)
 8000236:	4c0d      	ldr	r4, [pc, #52]	; (800026c <__libc_init_array+0x3c>)
 8000238:	1b64      	subs	r4, r4, r5
 800023a:	10a4      	asrs	r4, r4, #2
 800023c:	42a6      	cmp	r6, r4
 800023e:	d109      	bne.n	8000254 <__libc_init_array+0x24>
 8000240:	2600      	movs	r6, #0
 8000242:	f000 f819 	bl	8000278 <_init>
 8000246:	4d0a      	ldr	r5, [pc, #40]	; (8000270 <__libc_init_array+0x40>)
 8000248:	4c0a      	ldr	r4, [pc, #40]	; (8000274 <__libc_init_array+0x44>)
 800024a:	1b64      	subs	r4, r4, r5
 800024c:	10a4      	asrs	r4, r4, #2
 800024e:	42a6      	cmp	r6, r4
 8000250:	d105      	bne.n	800025e <__libc_init_array+0x2e>
 8000252:	bd70      	pop	{r4, r5, r6, pc}
 8000254:	00b3      	lsls	r3, r6, #2
 8000256:	58eb      	ldr	r3, [r5, r3]
 8000258:	4798      	blx	r3
 800025a:	3601      	adds	r6, #1
 800025c:	e7ee      	b.n	800023c <__libc_init_array+0xc>
 800025e:	00b3      	lsls	r3, r6, #2
 8000260:	58eb      	ldr	r3, [r5, r3]
 8000262:	4798      	blx	r3
 8000264:	3601      	adds	r6, #1
 8000266:	e7f2      	b.n	800024e <__libc_init_array+0x1e>
 8000268:	08000290 	.word	0x08000290
 800026c:	08000290 	.word	0x08000290
 8000270:	08000290 	.word	0x08000290
 8000274:	08000294 	.word	0x08000294

08000278 <_init>:
 8000278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027e:	bc08      	pop	{r3}
 8000280:	469e      	mov	lr, r3
 8000282:	4770      	bx	lr

08000284 <_fini>:
 8000284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800028a:	bc08      	pop	{r3}
 800028c:	469e      	mov	lr, r3
 800028e:	4770      	bx	lr
