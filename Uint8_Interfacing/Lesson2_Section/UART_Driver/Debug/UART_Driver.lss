
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000252  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c14  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c2  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064d  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000019c  00000000  00000000  00001e28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000470  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  7a:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <IS_LCD_Busy>:
	#ifdef Eight_Bit_MODE
	//Setting LCD PORT As Input
	DataDir_LCD_PORT = 0x00; 
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |=(0xff<< Data_Shift);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	80 6f       	ori	r24, 0xF0	; 240
  86:	8a bb       	out	0x1a, r24	; 26
	#endif
	//Setting Control in Read Mode
	LCD_CTRL |= (1<<RW_Switch);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	84 60       	ori	r24, 0x04	; 4
  8c:	88 bb       	out	0x18, r24	; 24
	//Rs Is off in Command Mode
	LCD_CTRL &= ~(1<<RS_Switch);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	8d 7f       	andi	r24, 0xFD	; 253
  92:	88 bb       	out	0x18, r24	; 24
	//while(LCD_PORT >= 0x80);
	LCD_CTRL |= (1<<RS_Switch);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	82 60       	ori	r24, 0x02	; 2
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_Send_Pulse>:
}
void LCD_Send_Pulse()
{
	LCD_CTRL &=~(1<<EN_Switch);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	87 7f       	andi	r24, 0xF7	; 247
  a0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	83 ed       	ldi	r24, 0xD3	; 211
  a4:	90 e3       	ldi	r25, 0x30	; 48
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <LCD_Send_Pulse+0xa>
  aa:	00 c0       	rjmp	.+0      	; 0xac <LCD_Send_Pulse+0x10>
  ac:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |= (1<<EN_Switch);	
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	08 95       	ret

000000b6 <LCD_Send_Command>:
	LCD_Send_Command(LCD_Entry_Mode);
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
}
void LCD_Send_Command (unsigned char CMD)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	c8 2f       	mov	r28, r24
	LCD_PORT = CMD;
	LCD_CTRL &= ~((1<<RS_Switch)|(1<<RW_Switch));
	LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	IS_LCD_Busy();
  bc:	0e 94 41 00 	call	0x82	; 0x82 <IS_LCD_Busy>
	LCD_PORT =  ((LCD_PORT & 0x0F) | (CMD & 0xF0));
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	9c 2f       	mov	r25, r28
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	89 2b       	or	r24, r25
  ca:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off 
	LCD_CTRL =~((1<<RS_Switch)|(1<<RW_Switch));
  cc:	d9 ef       	ldi	r29, 0xF9	; 249
  ce:	d8 bb       	out	0x18, r29	; 24
	//Sending MSB Nibble
	LCD_Send_Pulse();
  d0:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Send_Pulse>
	LCD_PORT = ((LCD_PORT & 0x0F) | (CMD << Data_Shift)) ;
  d4:	2b b3       	in	r18, 0x1b	; 27
  d6:	30 e1       	ldi	r19, 0x10	; 16
  d8:	c3 9f       	mul	r28, r19
  da:	c0 01       	movw	r24, r0
  dc:	11 24       	eor	r1, r1
  de:	92 2f       	mov	r25, r18
  e0:	9f 70       	andi	r25, 0x0F	; 15
  e2:	89 2b       	or	r24, r25
  e4:	8b bb       	out	0x1b, r24	; 27
	//Rs is off at CMD  Mode And RW is off
	LCD_CTRL =~((1<<RS_Switch)|(1<<RW_Switch));
  e6:	d8 bb       	out	0x18, r29	; 24
    //Sending LSB Nibble
	LCD_Send_Pulse();
  e8:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Send_Pulse>
	#endif
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_Send_A_Character>:
void LCD_Send_A_Character(unsigned char data)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	 IS_LCD_Busy();
  f6:	0e 94 41 00 	call	0x82	; 0x82 <IS_LCD_Busy>
	 //Sending Data  
	 LCD_Send_Pulse();
    #endif
	#ifdef FOUR_Bit_MODE
	//Putting MSB Nibble on PORT
	LCD_PORT = (LCD_PORT & 0x0F)|(data & 0xF0);
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	9c 2f       	mov	r25, r28
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	89 2b       	or	r24, r25
 104:	8b bb       	out	0x1b, r24	; 27
	//RS is on at read mode
	LCD_CTRL |= (1<<RS_Switch);
 106:	88 b3       	in	r24, 0x18	; 24
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	88 bb       	out	0x18, r24	; 24
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	8b 7f       	andi	r24, 0xFB	; 251
 110:	88 bb       	out	0x18, r24	; 24
	//Send MSB NIbble 
	LCD_Send_Pulse();
 112:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Send_Pulse>
	//Putting LSB Nibble on Port
	LCD_PORT =(LCD_PORT & 0x0F)|(data << Data_Shift);
 116:	2b b3       	in	r18, 0x1b	; 27
 118:	30 e1       	ldi	r19, 0x10	; 16
 11a:	c3 9f       	mul	r28, r19
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	92 2f       	mov	r25, r18
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	89 2b       	or	r24, r25
 126:	8b bb       	out	0x1b, r24	; 27
	//RS is on at read mode
	LCD_CTRL |= (1<<RS_Switch);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	88 bb       	out	0x18, r24	; 24
	//RW is off at read mode
	LCD_CTRL &= ~(1<<RW_Switch);
 12e:	88 b3       	in	r24, 0x18	; 24
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	88 bb       	out	0x18, r24	; 24
	//Send MSB NIbble
	LCD_Send_Pulse();
 134:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_Send_Pulse>
    #endif
}
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <LCD_Goto_XY>:
	}
	
}
void LCD_Goto_XY(unsigned char row , unsigned char column)
{
	if(row == 1)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	49 f4       	brne	.+18     	; 0x152 <LCD_Goto_XY+0x16>
	{
		if(column > 0 && column < 16 )
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	86 0f       	add	r24, r22
 144:	8f 30       	cpi	r24, 0x0F	; 15
 146:	78 f4       	brcc	.+30     	; 0x166 <LCD_Goto_XY+0x2a>
		LCD_Send_Command(0x80+column);
 148:	80 e8       	ldi	r24, 0x80	; 128
 14a:	86 0f       	add	r24, r22
 14c:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
 150:	08 95       	ret
	}
	else if( row == 2)
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	41 f4       	brne	.+16     	; 0x166 <LCD_Goto_XY+0x2a>
	{
		if(column > 0 && column < 16 )
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	86 0f       	add	r24, r22
 15a:	8f 30       	cpi	r24, 0x0F	; 15
 15c:	20 f4       	brcc	.+8      	; 0x166 <LCD_Goto_XY+0x2a>
		LCD_Send_Command(0xC0+column);
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	86 0f       	add	r24, r22
 162:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
 166:	08 95       	ret

00000168 <LCD_Clear_Screen>:
	}
}
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_Clear_Display);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
 16e:	08 95       	ret

00000170 <LCD_Init>:
 170:	87 e8       	ldi	r24, 0x87	; 135
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Init+0x4>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Init+0xa>
 17a:	00 00       	nop
}
void LCD_Init()
{
	_delay_ms(20);
	//Setting Control pins as output 
	DataDir_LCD_CTRL |=((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 17c:	87 b3       	in	r24, 0x17	; 23
 17e:	8e 60       	ori	r24, 0x0E	; 14
 180:	87 bb       	out	0x17, r24	; 23
	//Masking off CTRL bits
	LCD_CTRL &=~((1<<EN_Switch)|(1<<RS_Switch)|(1<<RW_Switch));
 182:	88 b3       	in	r24, 0x18	; 24
 184:	81 7f       	andi	r24, 0xF1	; 241
 186:	88 bb       	out	0x18, r24	; 24
	_delay_ms(15);
	LCD_Clear_Screen();
	LCD_Send_Command(LCD_8bit_2Line);
	#endif
	#ifdef FOUR_Bit_MODE
	DataDir_LCD_PORT |= 0x0f;
 188:	8a b3       	in	r24, 0x1a	; 26
 18a:	8f 60       	ori	r24, 0x0F	; 15
 18c:	8a bb       	out	0x1a, r24	; 26
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	9e e0       	ldi	r25, 0x0E	; 14
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Init+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Init+0x28>
 198:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 19a:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_Clear_Screen>
	LCD_Send_Command(0x02);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
	LCD_Send_Command(LCD_4bit_2_Line);
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
	#endif
	LCD_Send_Command(LCD_Entry_Mode);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
	LCD_Send_Command(LCD_Start_At_Beginning_Of_First_Line);
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
	LCD_Send_Command(LCD_Display_Cursor_Blinking);
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 5b 00 	call	0xb6	; 0xb6 <LCD_Send_Command>
 1bc:	08 95       	ret

000001be <main>:
#include "UART.h"

int main(void)
{
	
	LCD_Init();
 1be:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
	Uart_Init();
 1c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Uart_Init>
	LCD_Goto_XY(0,0);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Goto_XY>
	Uart_Send('F');
 1ce:	86 e4       	ldi	r24, 0x46	; 70
 1d0:	0e 94 12 01 	call	0x224	; 0x224 <Uart_Send>
	Uart_Send('a');
 1d4:	81 e6       	ldi	r24, 0x61	; 97
 1d6:	0e 94 12 01 	call	0x224	; 0x224 <Uart_Send>
	Uart_Send('m');
 1da:	8d e6       	ldi	r24, 0x6D	; 109
 1dc:	0e 94 12 01 	call	0x224	; 0x224 <Uart_Send>
	uart_send_string(" Ayman#");
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 1a 01 	call	0x234	; 0x234 <uart_send_string>

	LCD_Goto_XY(1,0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Goto_XY>
    while (1) 
    {
		
		LCD_Send_A_Character(Uart_Receive());
 1f0:	0e 94 16 01 	call	0x22c	; 0x22c <Uart_Receive>
 1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Send_A_Character>
 1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <main+0x32>

000001fa <Uart_Init>:
 *  Author: Fam Ayman
 */ 
#include "UART.h"
void Uart_Init(void)
{
	UBRRL = 51; //for 9600 baudrate 
 1fa:	83 e3       	ldi	r24, 0x33	; 51
 1fc:	89 b9       	out	0x09, r24	; 9
	Reset(UCSRA,U2X); //Normal mode
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8d 7f       	andi	r24, 0xFD	; 253
 202:	8b b9       	out	0x0b, r24	; 11
	set(UCSRB,TXEN);  //Enabling transmitting
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	88 60       	ori	r24, 0x08	; 8
 208:	8a b9       	out	0x0a, r24	; 10
	set(UCSRB,RXEN);  //Enabling Receiving
 20a:	8a b1       	in	r24, 0x0a	; 10
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	8a b9       	out	0x0a, r24	; 10
	//No parity
	//Transmitting 8 bit
	set(UCSRC,UCSZ0);
 210:	80 b5       	in	r24, 0x20	; 32
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 bd       	out	0x20, r24	; 32
	set(UCSRC,UCSZ1);
 216:	80 b5       	in	r24, 0x20	; 32
 218:	84 60       	ori	r24, 0x04	; 4
 21a:	80 bd       	out	0x20, r24	; 32
	Reset(UCSRB,UCSZ2);
 21c:	8a b1       	in	r24, 0x0a	; 10
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	8a b9       	out	0x0a, r24	; 10
 222:	08 95       	ret

00000224 <Uart_Send>:
	
}
void Uart_Send(unsigned char data)
{
	while(!Read(UCSRA,UDRE));
 224:	5d 9b       	sbis	0x0b, 5	; 11
 226:	fe cf       	rjmp	.-4      	; 0x224 <Uart_Send>
	UDR = data;
 228:	8c b9       	out	0x0c, r24	; 12
 22a:	08 95       	ret

0000022c <Uart_Receive>:
}
unsigned char Uart_Receive(void)
{
	while(!Read(UCSRA,RXC));
 22c:	5f 9b       	sbis	0x0b, 7	; 11
 22e:	fe cf       	rjmp	.-4      	; 0x22c <Uart_Receive>
	return UDR;
 230:	8c b1       	in	r24, 0x0c	; 12
}
 232:	08 95       	ret

00000234 <uart_send_string>:
void uart_send_string(unsigned char  *Data)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
	uint8_t *p = Data;
	while(*p != '#')
 23a:	03 c0       	rjmp	.+6      	; 0x242 <uart_send_string+0xe>
	{
		Uart_Send(*p);
 23c:	0e 94 12 01 	call	0x224	; 0x224 <Uart_Send>
		p++;
 240:	21 96       	adiw	r28, 0x01	; 1
	return UDR;
}
void uart_send_string(unsigned char  *Data)
{
	uint8_t *p = Data;
	while(*p != '#')
 242:	88 81       	ld	r24, Y
 244:	83 32       	cpi	r24, 0x23	; 35
 246:	d1 f7       	brne	.-12     	; 0x23c <uart_send_string+0x8>
	{
		Uart_Send(*p);
		p++;
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
